using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Pikaedit_Gen4
{
    public static class PkmLib
    {

        public enum Languages
        {
            None,
            Japan,
            English,
            French,
            Italian,
            German,
            Spanish = 7,
            Korean
        }

        public enum GenderRatios
        {
            Genderless,
            Always_Male,
            Always_Female,
            Half, //50%
            Mostly_Male, //87.5% Male
            Almost_Male, //75% Male
            Mostly_Female, //75% Female
        }

        public static byte[] dsvfooter = new byte[] { 0x7C, 0x3C, 0x2D, 0x2D, 0x53, 0x6E, 0x69, 0x70, 0x20, 0x61, 0x62, 0x6F, 0x76, 0x65, 0x20, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x72, 0x61, 0x77, 0x20, 0x73, 0x61, 0x76, 0x20, 0x62, 0x79, 0x20, 0x65, 0x78, 0x63, 0x6C, 0x75, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x44, 0x65, 0x53, 0x6D, 0x75, 0x4D, 0x45, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6F, 0x6F, 0x74, 0x65, 0x72, 0x3A, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x8, 0x0, 0x5, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7C, 0x2D, 0x44, 0x45, 0x53, 0x4D, 0x55, 0x4D, 0x45, 0x20, 0x53, 0x41, 0x56, 0x45, 0x2D, 0x7C };
        public static byte[] genderRatio = new byte[] { 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 3, 3, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 0, 0, 3, 3, 2, 5, 5, 3, 1, 3, 3, 3, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 1, 1, 2, 5, 5, 2, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 5, 5, 6, 3, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 6, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3, 2, 1, 4, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 3, 3, 3, 0, 0, 3, 3, 2, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 5, 5, 4, 3, 4, 4, 3, 3, 0, 1, 3, 3, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 4, 4, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0 };

        //English lists
        public static List<string> species = new List<string>();
        public static List<string> abilities = new List<string>();
        public static List<string> natures = new List<string>();
        public static List<string> items = new List<string>();
        public static List<string> locations = new List<string>();
        public static List<string> moves = new List<string>();
        public static List<string> versions = new List<string>();
        public static List<string> languages = new List<string>();

        //Language non-dependant lists
        public static List<ushort> locationValues = new List<ushort> { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076 };
        public static List<string> pokeballs = new List<string> { "", "Master Ball", "Ultra Ball", "Great Ball", "Poké Ball", "Safari Ball", "Net Ball", "Dive Ball", "Nest Ball", "Repeat Ball", "Timer Ball", "Luxury Ball", "Premier Ball", "Dusk Ball", "Heal Ball", "Quick Ball", "Cherish Ball", "Fast Ball", "Level Ball", "Lure Ball", "Heavy Ball", "Love Ball", "Friend Ball", "Moon Ball", "Sport Ball", "Dream Ball" };
        public static byte[] resetpkm = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC7, 0x97, 0x01, 0x0, 0x0, 0x0, 0x01, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x02, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xD5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x02, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2C, 0x01, 0x3F, 0x01, 0x36, 0x01, 0x2C, 0x01, 0x2B, 0x01, 0x3D, 0x01, 0x2B, 0x01, 0x3F, 0x01, 0x3C, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x17, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3A, 0x01, 0x4D, 0x01, 0x4F, 0x01, 0x45, 0x01, 0x49, 0x01, 0x48, 0x01, 0x58, 0x01, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0D, 0x02, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x04, 0x01, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x01, 0x0, 0x0B, 0x0, 0x0B, 0x0, 0x05, 0x0, 0x05, 0x0, 0x05, 0x0, 0x06, 0x0, 0x06, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        public static List<ushort> ingameChar = new List<ushort> { 0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F, 0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F, 0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F, 0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F, 0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, 0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F, 0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F, 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF, 0x0100, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107, 0x0108, 0x0109, 0x010A, 0x010B, 0x010C, 0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0112, 0x0113, 0x0114, 0x0115, 0x0116, 0x0117, 0x0118, 0x0119, 0x011A, 0x011B, 0x011C, 0x011D, 0x011E, 0x011F, 0x0120, 0x0121, 0x0122, 0x0123, 0x0124, 0x0125, 0x0126, 0x0127, 0x0128, 0x0129, 0x012A, 0x012B, 0x012C, 0x012D, 0x012E, 0x012F, 0x0130, 0x0131, 0x0132, 0x0133, 0x0134, 0x0135, 0x0136, 0x0137, 0x0138, 0x0139, 0x013A, 0x013B, 0x013C, 0x013D, 0x013E, 0x013F, 0x0140, 0x0141, 0x0142, 0x0143, 0x0144, 0x0145, 0x0146, 0x0147, 0x0148, 0x0149, 0x014A, 0x014B, 0x014C, 0x014D, 0x014E, 0x014F, 0x0150, 0x0151, 0x0152, 0x0153, 0x0154, 0x0155, 0x0156, 0x0157, 0x0158, 0x0159, 0x015A, 0x015B, 0x015C, 0x015D, 0x015E, 0x015F, 0x0160, 0x0161, 0x0162, 0x0163, 0x0164, 0x0165, 0x0166, 0x0167, 0x0168, 0x0169, 0x016A, 0x016B, 0x016C, 0x016D, 0x016E, 0x016F, 0x0170, 0x0171, 0x0172, 0x0173, 0x0174, 0x0175, 0x0176, 0x0177, 0x0178, 0x0179, 0x017A, 0x017B, 0x017C, 0x017D, 0x017E, 0x017F, 0x0180, 0x0181, 0x0182, 0x0183, 0x0184, 0x0185, 0x0186, 0x0187, 0x0188, 0x0189, 0x018A, 0x018B, 0x018C, 0x018D, 0x018E, 0x018F, 0x0190, 0x0191, 0x0192, 0x0193, 0x0194, 0x0195, 0x0196, 0x0197, 0x0198, 0x0199, 0x019A, 0x019B, 0x019C, 0x019D, 0x019E, 0x019F, 0x01A0, 0x01A1, 0x01A2, 0x01A3, 0x01A4, 0x01A5, 0x01A6, 0x01A7, 0x01A8, 0x01A9, 0x01AA, 0x01AB, 0x01AC, 0x01AD, 0x01AE, 0x01AF, 0x01B0, 0x01B1, 0x01B2, 0x01B3, 0x01B4, 0x01B5, 0x01B6, 0x01B7, 0x01B8, 0x01B9, 0x01BA, 0x01BB, 0x01BC, 0x01BD, 0x01BE, 0x01BF, 0x01C0, 0x01C1, 0x01C2, 0x01C3, 0x01C4, 0x01C5, 0x01C6, 0x01C7, 0x01C8, 0x01C9, 0x01CA, 0x01CB, 0x01CC, 0x01CD, 0x01CE, 0x01CF, 0x01D0, 0x01D1, 0x01D2, 0x01D3, 0x01D4, 0x01D5, 0x01D6, 0x01D7, 0x01D8, 0x01D9, 0x01DA, 0x01DB, 0x01DC, 0x01DD, 0x01DE, 0x01DF, 0x01E0, 0x01E1, 0x01E8, 0x01E9, 0x01EA, 0x0400, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407, 0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x040D, 0x040E, 0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 0x0450, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457, 0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x045D, 0x045E, 0x045F, 0x0460, 0x0461, 0x0462, 0x0463, 0x0464, 0x0465, 0x0466, 0x0467, 0x0468, 0x0469, 0x046A, 0x046B, 0x046C, 0x046D, 0x046E, 0x046F, 0x0470, 0x0471, 0x0472, 0x0473, 0x0474, 0x0475, 0x0476, 0x0477, 0x0478, 0x0479, 0x047A, 0x047B, 0x047C, 0x047D, 0x047E, 0x047F, 0x0480, 0x0481, 0x0482, 0x0483, 0x0484, 0x0485, 0x0486, 0x0487, 0x0488, 0x0489, 0x048A, 0x048B, 0x048C, 0x048D, 0x048E, 0x048F, 0x0490, 0x0491, 0x0492, 0x0493, 0x0494, 0x0495, 0x0496, 0x0497, 0x0498, 0x0499, 0x049A, 0x049B, 0x049C, 0x049D, 0x049E, 0x049F, 0x04A0, 0x04A1, 0x04A2, 0x04A3, 0x04A4, 0x04A5, 0x04A6, 0x04A7, 0x04A8, 0x04A9, 0x04AA, 0x04AB, 0x04AC, 0x04AD, 0x04AE, 0x04AF, 0x04B0, 0x04B1, 0x04B2, 0x04B3, 0x04B4, 0x04B5, 0x04B6, 0x04B7, 0x04B8, 0x04B9, 0x04BA, 0x04BB, 0x04BC, 0x04BD, 0x04BE, 0x04BF, 0x04C0, 0x04C1, 0x04C2, 0x04C3, 0x04C4, 0x04C5, 0x04C6, 0x04C7, 0x04C8, 0x04C9, 0x04CA, 0x04CB, 0x04CC, 0x04CD, 0x04CE, 0x04CF, 0x04D0, 0x04D1, 0x04D2, 0x04D3, 0x04D4, 0x04D5, 0x04D6, 0x04D7, 0x04D8, 0x04D9, 0x04DA, 0x04DB, 0x04DC, 0x04DD, 0x04DE, 0x04DF, 0x04E0, 0x04E1, 0x04E2, 0x04E3, 0x04E4, 0x04E5, 0x04E6, 0x04E7, 0x04E8, 0x04E9, 0x04EA, 0x04EB, 0x04EC, 0x04ED, 0x04EE, 0x04EF, 0x04F0, 0x04F1, 0x04F2, 0x04F3, 0x04F4, 0x04F5, 0x04F6, 0x04F7, 0x04F8, 0x04F9, 0x04FA, 0x04FB, 0x04FC, 0x04FD, 0x04FE, 0x04FF, 0x0500, 0x0501, 0x0502, 0x0503, 0x0504, 0x0505, 0x0506, 0x0507, 0x0508, 0x0509, 0x050A, 0x050B, 0x050C, 0x050D, 0x050E, 0x050F, 0x0510, 0x0511, 0x0512, 0x0513, 0x0514, 0x0515, 0x0516, 0x0517, 0x0518, 0x0519, 0x051A, 0x051B, 0x051C, 0x051D, 0x051E, 0x051F, 0x0520, 0x0521, 0x0522, 0x0523, 0x0524, 0x0525, 0x0526, 0x0527, 0x0528, 0x0529, 0x052A, 0x052B, 0x052C, 0x052D, 0x052E, 0x052F, 0x0530, 0x0531, 0x0532, 0x0533, 0x0534, 0x0535, 0x0536, 0x0537, 0x0538, 0x0539, 0x053A, 0x053B, 0x053C, 0x053D, 0x053E, 0x053F, 0x0540, 0x0541, 0x0542, 0x0543, 0x0544, 0x0545, 0x0546, 0x0547, 0x0548, 0x0549, 0x054A, 0x054B, 0x054C, 0x054D, 0x054E, 0x054F, 0x0550, 0x0551, 0x0552, 0x0553, 0x0554, 0x0555, 0x0556, 0x0557, 0x0558, 0x0559, 0x055A, 0x055B, 0x055C, 0x055D, 0x055E, 0x055F, 0x0560, 0x0561, 0x0562, 0x0563, 0x0564, 0x0565, 0x0566, 0x0567, 0x0568, 0x0569, 0x056A, 0x056B, 0x056C, 0x056D, 0x056E, 0x056F, 0x0570, 0x0571, 0x0572, 0x0573, 0x0574, 0x0575, 0x0576, 0x0577, 0x0578, 0x0579, 0x057A, 0x057B, 0x057C, 0x057D, 0x057E, 0x057F, 0x0580, 0x0581, 0x0582, 0x0583, 0x0584, 0x0585, 0x0586, 0x0587, 0x0588, 0x0589, 0x058A, 0x058B, 0x058C, 0x058D, 0x058E, 0x058F, 0x0590, 0x0591, 0x0592, 0x0593, 0x0594, 0x0595, 0x0596, 0x0597, 0x0598, 0x0599, 0x059A, 0x059B, 0x059C, 0x059D, 0x059E, 0x059F, 0x05A0, 0x05A1, 0x05A2, 0x05A3, 0x05A4, 0x05A5, 0x05A6, 0x05A7, 0x05A8, 0x05A9, 0x05AA, 0x05AB, 0x05AC, 0x05AD, 0x05AE, 0x05AF, 0x05B0, 0x05B1, 0x05B2, 0x05B3, 0x05B4, 0x05B5, 0x05B6, 0x05B7, 0x05B8, 0x05B9, 0x05BA, 0x05BB, 0x05BC, 0x05BD, 0x05BE, 0x05BF, 0x05C0, 0x05C1, 0x05C2, 0x05C3, 0x05C4, 0x05C5, 0x05C6, 0x05C7, 0x05C8, 0x05C9, 0x05CA, 0x05CB, 0x05CC, 0x05CD, 0x05CE, 0x05CF, 0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF, 0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, 0x05EB, 0x05EC, 0x05ED, 0x05EE, 0x05EF, 0x05F0, 0x05F1, 0x05F2, 0x05F3, 0x05F4, 0x05F5, 0x05F6, 0x05F7, 0x05F8, 0x05F9, 0x05FA, 0x05FB, 0x05FC, 0x05FD, 0x05FE, 0x05FF, 0x0600, 0x0601, 0x0602, 0x0603, 0x0604, 0x0605, 0x0606, 0x0607, 0x0608, 0x0609, 0x060A, 0x060B, 0x060C, 0x060D, 0x060E, 0x060F, 0x0610, 0x0611, 0x0612, 0x0613, 0x0614, 0x0615, 0x0616, 0x0617, 0x0618, 0x0619, 0x061A, 0x061B, 0x061C, 0x061D, 0x061E, 0x061F, 0x0620, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, 0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0x063B, 0x063C, 0x063D, 0x063E, 0x063F, 0x0640, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F, 0x0650, 0x0651, 0x0652, 0x0653, 0x0654, 0x0655, 0x0656, 0x0657, 0x0658, 0x0659, 0x065A, 0x065B, 0x065C, 0x065D, 0x065E, 0x065F, 0x0660, 0x0661, 0x0662, 0x0663, 0x0664, 0x0665, 0x0666, 0x0667, 0x0668, 0x0669, 0x066A, 0x066B, 0x066C, 0x066D, 0x066E, 0x066F, 0x0670, 0x0671, 0x0672, 0x0673, 0x0674, 0x0675, 0x0676, 0x0677, 0x0678, 0x0679, 0x067A, 0x067B, 0x067C, 0x067D, 0x067E, 0x067F, 0x0680, 0x0681, 0x0682, 0x0683, 0x0684, 0x0685, 0x0686, 0x0687, 0x0688, 0x0689, 0x068A, 0x068B, 0x068C, 0x068D, 0x068E, 0x068F, 0x0690, 0x0691, 0x0692, 0x0693, 0x0694, 0x0695, 0x0696, 0x0697, 0x0698, 0x0699, 0x069A, 0x069B, 0x069C, 0x069D, 0x069E, 0x069F, 0x06A0, 0x06A1, 0x06A2, 0x06A3, 0x06A4, 0x06A5, 0x06A6, 0x06A7, 0x06A8, 0x06A9, 0x06AA, 0x06AB, 0x06AC, 0x06AD, 0x06AE, 0x06AF, 0x06B0, 0x06B1, 0x06B2, 0x06B3, 0x06B4, 0x06B5, 0x06B6, 0x06B7, 0x06B8, 0x06B9, 0x06BA, 0x06BB, 0x06BC, 0x06BD, 0x06BE, 0x06BF, 0x06C0, 0x06C1, 0x06C2, 0x06C3, 0x06C4, 0x06C5, 0x06C6, 0x06C7, 0x06C8, 0x06C9, 0x06CA, 0x06CB, 0x06CC, 0x06CD, 0x06CE, 0x06CF, 0x06D0, 0x06D1, 0x06D2, 0x06D3, 0x06D4, 0x06D5, 0x06D6, 0x06D7, 0x06D8, 0x06D9, 0x06DA, 0x06DB, 0x06DC, 0x06DD, 0x06DE, 0x06DF, 0x06E0, 0x06E1, 0x06E2, 0x06E3, 0x06E4, 0x06E5, 0x06E6, 0x06E7, 0x06E8, 0x06E9, 0x06EA, 0x06EB, 0x06EC, 0x06ED, 0x06EE, 0x06EF, 0x06F0, 0x06F1, 0x06F2, 0x06F3, 0x06F4, 0x06F5, 0x06F6, 0x06F7, 0x06F8, 0x06F9, 0x06FA, 0x06FB, 0x06FC, 0x06FD, 0x06FE, 0x06FF, 0x0700, 0x0701, 0x0702, 0x0703, 0x0704, 0x0705, 0x0706, 0x0707, 0x0708, 0x0709, 0x070A, 0x070B, 0x070C, 0x070D, 0x070E, 0x070F, 0x0710, 0x0711, 0x0712, 0x0713, 0x0714, 0x0715, 0x0716, 0x0717, 0x0718, 0x0719, 0x071A, 0x071B, 0x071C, 0x071D, 0x071E, 0x071F, 0x0720, 0x0721, 0x0722, 0x0723, 0x0724, 0x0725, 0x0726, 0x0727, 0x0728, 0x0729, 0x072A, 0x072B, 0x072C, 0x072D, 0x072E, 0x072F, 0x0730, 0x0731, 0x0732, 0x0733, 0x0734, 0x0735, 0x0736, 0x0737, 0x0738, 0x0739, 0x073A, 0x073B, 0x073C, 0x073D, 0x073E, 0x073F, 0x0740, 0x0741, 0x0742, 0x0743, 0x0744, 0x0745, 0x0746, 0x0747, 0x0748, 0x0749, 0x074A, 0x074B, 0x074C, 0x074D, 0x074E, 0x074F, 0x0750, 0x0751, 0x0752, 0x0753, 0x0754, 0x0755, 0x0756, 0x0757, 0x0758, 0x0759, 0x075A, 0x075B, 0x075C, 0x075D, 0x075E, 0x075F, 0x0760, 0x0761, 0x0762, 0x0763, 0x0764, 0x0765, 0x0766, 0x0767, 0x0768, 0x0769, 0x076A, 0x076B, 0x076C, 0x076D, 0x076E, 0x076F, 0x0770, 0x0771, 0x0772, 0x0773, 0x0774, 0x0775, 0x0776, 0x0777, 0x0778, 0x0779, 0x077A, 0x077B, 0x077C, 0x077D, 0x077E, 0x077F, 0x0780, 0x0781, 0x0782, 0x0783, 0x0784, 0x0785, 0x0786, 0x0787, 0x0788, 0x0789, 0x078A, 0x078B, 0x078C, 0x078D, 0x078E, 0x078F, 0x0790, 0x0791, 0x0792, 0x0793, 0x0794, 0x0795, 0x0796, 0x0797, 0x0798, 0x0799, 0x079A, 0x079B, 0x079C, 0x079D, 0x079E, 0x079F, 0x07A0, 0x07A1, 0x07A2, 0x07A3, 0x07A4, 0x07A5, 0x07A6, 0x07A7, 0x07A8, 0x07A9, 0x07AA, 0x07AB, 0x07AC, 0x07AD, 0x07AE, 0x07AF, 0x07B0, 0x07B1, 0x07B2, 0x07B3, 0x07B4, 0x07B5, 0x07B6, 0x07B7, 0x07B8, 0x07B9, 0x07BA, 0x07BB, 0x07BC, 0x07BD, 0x07BE, 0x07BF, 0x07C0, 0x07C1, 0x07C2, 0x07C3, 0x07C4, 0x07C5, 0x07C6, 0x07C7, 0x07C8, 0x07C9, 0x07CA, 0x07CB, 0x07CC, 0x07CD, 0x07CE, 0x07CF, 0x07D0, 0x07D1, 0x07D2, 0x07D3, 0x07D4, 0x07D5, 0x07D6, 0x07D7, 0x07D8, 0x07D9, 0x07DA, 0x07DB, 0x07DC, 0x07DD, 0x07DE, 0x07DF, 0x07E0, 0x07E1, 0x07E2, 0x07E3, 0x07E4, 0x07E5, 0x07E6, 0x07E7, 0x07E8, 0x07E9, 0x07EA, 0x07EB, 0x07EC, 0x07ED, 0x07EE, 0x07EF, 0x07F0, 0x07F1, 0x07F2, 0x07F3, 0x07F4, 0x07F5, 0x07F6, 0x07F7, 0x07F8, 0x07F9, 0x07FA, 0x07FB, 0x07FC, 0x07FD, 0x07FE, 0x07FF, 0x0800, 0x0801, 0x0802, 0x0803, 0x0804, 0x0805, 0x0806, 0x0807, 0x0808, 0x0809, 0x080A, 0x080B, 0x080C, 0x080D, 0x080E, 0x080F, 0x0810, 0x0811, 0x0812, 0x0813, 0x0814, 0x0815, 0x0816, 0x0817, 0x0818, 0x0819, 0x081A, 0x081B, 0x081C, 0x081D, 0x081E, 0x081F, 0x0820, 0x0821, 0x0822, 0x0823, 0x0824, 0x0825, 0x0826, 0x0827, 0x0828, 0x0829, 0x082A, 0x082B, 0x082C, 0x082D, 0x082E, 0x082F, 0x0830, 0x0831, 0x0832, 0x0833, 0x0834, 0x0835, 0x0836, 0x0837, 0x0838, 0x0839, 0x083A, 0x083B, 0x083C, 0x083D, 0x083E, 0x083F, 0x0840, 0x0841, 0x0842, 0x0843, 0x0844, 0x0845, 0x0846, 0x0847, 0x0848, 0x0849, 0x084A, 0x084B, 0x084C, 0x084D, 0x084E, 0x084F, 0x0850, 0x0851, 0x0852, 0x0853, 0x0854, 0x0855, 0x0856, 0x0857, 0x0858, 0x0859, 0x085A, 0x085B, 0x085C, 0x085D, 0x085E, 0x085F, 0x0860, 0x0861, 0x0862, 0x0863, 0x0864, 0x0865, 0x0866, 0x0867, 0x0868, 0x0869, 0x086A, 0x086B, 0x086C, 0x086D, 0x086E, 0x086F, 0x0870, 0x0871, 0x0872, 0x0873, 0x0874, 0x0875, 0x0876, 0x0877, 0x0878, 0x0879, 0x087A, 0x087B, 0x087C, 0x087D, 0x087E, 0x087F, 0x0880, 0x0881, 0x0882, 0x0883, 0x0884, 0x0885, 0x0886, 0x0887, 0x0888, 0x0889, 0x088A, 0x088B, 0x088C, 0x088D, 0x088E, 0x088F, 0x0890, 0x0891, 0x0892, 0x0893, 0x0894, 0x0895, 0x0896, 0x0897, 0x0898, 0x0899, 0x089A, 0x089B, 0x089C, 0x089D, 0x089E, 0x089F, 0x08A0, 0x08A1, 0x08A2, 0x08A3, 0x08A4, 0x08A5, 0x08A6, 0x08A7, 0x08A8, 0x08A9, 0x08AA, 0x08AB, 0x08AC, 0x08AD, 0x08AE, 0x08AF, 0x08B0, 0x08B1, 0x08B2, 0x08B3, 0x08B4, 0x08B5, 0x08B6, 0x08B7, 0x08B8, 0x08B9, 0x08BA, 0x08BB, 0x08BC, 0x08BD, 0x08BE, 0x08BF, 0x08C0, 0x08C1, 0x08C2, 0x08C3, 0x08C4, 0x08C5, 0x08C6, 0x08C7, 0x08C8, 0x08C9, 0x08CA, 0x08CB, 0x08CC, 0x08CD, 0x08CE, 0x08CF, 0x08D0, 0x08D1, 0x08D2, 0x08D3, 0x08D4, 0x08D5, 0x08D6, 0x08D7, 0x08D8, 0x08D9, 0x08DA, 0x08DB, 0x08DC, 0x08DD, 0x08DE, 0x08DF, 0x08E0, 0x08E1, 0x08E2, 0x08E3, 0x08E4, 0x08E5, 0x08E6, 0x08E7, 0x08E8, 0x08E9, 0x08EA, 0x08EB, 0x08EC, 0x08ED, 0x08EE, 0x08EF, 0x08F0, 0x08F1, 0x08F2, 0x08F3, 0x08F4, 0x08F5, 0x08F6, 0x08F7, 0x08F8, 0x08F9, 0x08FA, 0x08FB, 0x08FC, 0x08FD, 0x08FE, 0x08FF, 0x0900, 0x0901, 0x0902, 0x0903, 0x0904, 0x0905, 0x0906, 0x0907, 0x0908, 0x0909, 0x090A, 0x090B, 0x090C, 0x090D, 0x090E, 0x090F, 0x0910, 0x0911, 0x0912, 0x0913, 0x0914, 0x0915, 0x0916, 0x0917, 0x0918, 0x0919, 0x091A, 0x091B, 0x091C, 0x091D, 0x091E, 0x091F, 0x0920, 0x0921, 0x0922, 0x0923, 0x0924, 0x0925, 0x0926, 0x0927, 0x0928, 0x0929, 0x092A, 0x092B, 0x092C, 0x092D, 0x092E, 0x092F, 0x0930, 0x0931, 0x0932, 0x0933, 0x0934, 0x0935, 0x0936, 0x0937, 0x0938, 0x0939, 0x093A, 0x093B, 0x093C, 0x093D, 0x093E, 0x093F, 0x0940, 0x0941, 0x0942, 0x0943, 0x0944, 0x0945, 0x0946, 0x0947, 0x0948, 0x0949, 0x094A, 0x094B, 0x094C, 0x094D, 0x094E, 0x094F, 0x0950, 0x0951, 0x0952, 0x0953, 0x0954, 0x0955, 0x0956, 0x0957, 0x0958, 0x0959, 0x095A, 0x095B, 0x095C, 0x095D, 0x095E, 0x095F, 0x0960, 0x0961, 0x0962, 0x0963, 0x0964, 0x0965, 0x0966, 0x0967, 0x0968, 0x0969, 0x096A, 0x096B, 0x096C, 0x096D, 0x096E, 0x096F, 0x0970, 0x0971, 0x0972, 0x0973, 0x0974, 0x0975, 0x0976, 0x0977, 0x0978, 0x0979, 0x097A, 0x097B, 0x097C, 0x097D, 0x097E, 0x097F, 0x0980, 0x0981, 0x0982, 0x0983, 0x0984, 0x0985, 0x0986, 0x0987, 0x0988, 0x0989, 0x098A, 0x098B, 0x098C, 0x098D, 0x098E, 0x098F, 0x0990, 0x0991, 0x0992, 0x0993, 0x0994, 0x0995, 0x0996, 0x0997, 0x0998, 0x0999, 0x099A, 0x099B, 0x099C, 0x099D, 0x099E, 0x099F, 0x09A0, 0x09A1, 0x09A2, 0x09A3, 0x09A4, 0x09A5, 0x09A6, 0x09A7, 0x09A8, 0x09A9, 0x09AA, 0x09AB, 0x09AC, 0x09AD, 0x09AE, 0x09AF, 0x09B0, 0x09B1, 0x09B2, 0x09B3, 0x09B4, 0x09B5, 0x09B6, 0x09B7, 0x09B8, 0x09B9, 0x09BA, 0x09BB, 0x09BC, 0x09BD, 0x09BE, 0x09BF, 0x09C0, 0x09C1, 0x09C2, 0x09C3, 0x09C4, 0x09C5, 0x09C6, 0x09C7, 0x09C8, 0x09C9, 0x09CA, 0x09CB, 0x09CC, 0x09CD, 0x09CE, 0x09CF, 0x09D0, 0x09D1, 0x09D2, 0x09D3, 0x09D4, 0x09D5, 0x09D6, 0x09D7, 0x09D8, 0x09D9, 0x09DA, 0x09DB, 0x09DC, 0x09DD, 0x09DE, 0x09DF, 0x09E0, 0x09E1, 0x09E2, 0x09E3, 0x09E4, 0x09E5, 0x09E6, 0x09E7, 0x09E8, 0x09E9, 0x09EA, 0x09EB, 0x09EC, 0x09ED, 0x09EE, 0x09EF, 0x09F0, 0x09F1, 0x09F2, 0x09F3, 0x09F4, 0x09F5, 0x09F6, 0x09F7, 0x09F8, 0x09F9, 0x09FA, 0x09FB, 0x09FC, 0x09FD, 0x09FE, 0x09FF, 0x0A00, 0x0A01, 0x0A02, 0x0A03, 0x0A04, 0x0A05, 0x0A06, 0x0A07, 0x0A08, 0x0A09, 0x0A0A, 0x0A0B, 0x0A0C, 0x0A0D, 0x0A0E, 0x0A0F, 0x0A10, 0x0A11, 0x0A12, 0x0A13, 0x0A14, 0x0A15, 0x0A16, 0x0A17, 0x0A18, 0x0A19, 0x0A1A, 0x0A1B, 0x0A1C, 0x0A1D, 0x0A1E, 0x0A1F, 0x0A20, 0x0A21, 0x0A22, 0x0A23, 0x0A24, 0x0A25, 0x0A26, 0x0A27, 0x0A28, 0x0A29, 0x0A2A, 0x0A2B, 0x0A2C, 0x0A2D, 0x0A2E, 0x0A2F, 0x0A30, 0x0A31, 0x0A32, 0x0A33, 0x0A34, 0x0A35, 0x0A36, 0x0A37, 0x0A38, 0x0A39, 0x0A3A, 0x0A3B, 0x0A3C, 0x0A3D, 0x0A3E, 0x0A3F, 0x0A40, 0x0A41, 0x0A42, 0x0A43, 0x0A44, 0x0A45, 0x0A46, 0x0A47, 0x0A48, 0x0A49, 0x0A4A, 0x0A4B, 0x0A4C, 0x0A4D, 0x0A4E, 0x0A4F, 0x0A50, 0x0A51, 0x0A52, 0x0A53, 0x0A54, 0x0A55, 0x0A56, 0x0A57, 0x0A58, 0x0A59, 0x0A5A, 0x0A5B, 0x0A5C, 0x0A5D, 0x0A5E, 0x0A5F, 0x0A60, 0x0A61, 0x0A62, 0x0A63, 0x0A64, 0x0A65, 0x0A66, 0x0A67, 0x0A68, 0x0A69, 0x0A6A, 0x0A6B, 0x0A6C, 0x0A6D, 0x0A6E, 0x0A6F, 0x0A70, 0x0A71, 0x0A72, 0x0A73, 0x0A74, 0x0A75, 0x0A76, 0x0A77, 0x0A78, 0x0A79, 0x0A7A, 0x0A7B, 0x0A7C, 0x0A7D, 0x0A7E, 0x0A7F, 0x0A80, 0x0A81, 0x0A82, 0x0A83, 0x0A84, 0x0A85, 0x0A86, 0x0A87, 0x0A88, 0x0A89, 0x0A8A, 0x0A8B, 0x0A8C, 0x0A8D, 0x0A8E, 0x0A8F, 0x0A90, 0x0A91, 0x0A92, 0x0A93, 0x0A94, 0x0A95, 0x0A96, 0x0A97, 0x0A98, 0x0A99, 0x0A9A, 0x0A9B, 0x0A9C, 0x0A9D, 0x0A9E, 0x0A9F, 0x0AA0, 0x0AA1, 0x0AA2, 0x0AA3, 0x0AA4, 0x0AA5, 0x0AA6, 0x0AA7, 0x0AA8, 0x0AA9, 0x0AAA, 0x0AAB, 0x0AAC, 0x0AAD, 0x0AAE, 0x0AAF, 0x0AB0, 0x0AB1, 0x0AB2, 0x0AB3, 0x0AB4, 0x0AB5, 0x0AB6, 0x0AB7, 0x0AB8, 0x0AB9, 0x0ABA, 0x0ABB, 0x0ABC, 0x0ABD, 0x0ABE, 0x0ABF, 0x0AC0, 0x0AC1, 0x0AC2, 0x0AC3, 0x0AC4, 0x0AC5, 0x0AC6, 0x0AC7, 0x0AC8, 0x0AC9, 0x0ACA, 0x0ACB, 0x0ACC, 0x0ACD, 0x0ACE, 0x0ACF, 0x0AD0, 0x0AD1, 0x0AD2, 0x0AD3, 0x0AD4, 0x0AD5, 0x0AD6, 0x0AD7, 0x0AD8, 0x0AD9, 0x0ADA, 0x0ADB, 0x0ADC, 0x0ADD, 0x0ADE, 0x0ADF, 0x0AE0, 0x0AE1, 0x0AE2, 0x0AE3, 0x0AE4, 0x0AE5, 0x0AE6, 0x0AE7, 0x0AE8, 0x0AE9, 0x0AEA, 0x0AEB, 0x0AEC, 0x0AED, 0x0AEE, 0x0AEF, 0x0AF0, 0x0AF1, 0x0AF2, 0x0AF3, 0x0AF4, 0x0AF5, 0x0AF6, 0x0AF7, 0x0AF8, 0x0AF9, 0x0AFA, 0x0AFB, 0x0AFC, 0x0AFD, 0x0AFE, 0x0AFF, 0x0B00, 0x0B01, 0x0B02, 0x0B03, 0x0B04, 0x0B05, 0x0B06, 0x0B07, 0x0B08, 0x0B09, 0x0B0A, 0x0B0B, 0x0B0C, 0x0B0D, 0x0B0E, 0x0B0F, 0x0B10, 0x0B11, 0x0B12, 0x0B13, 0x0B14, 0x0B15, 0x0B16, 0x0B17, 0x0B18, 0x0B19, 0x0B1A, 0x0B1B, 0x0B1C, 0x0B1D, 0x0B1E, 0x0B1F, 0x0B20, 0x0B21, 0x0B22, 0x0B23, 0x0B24, 0x0B25, 0x0B26, 0x0B27, 0x0B28, 0x0B29, 0x0B2A, 0x0B2B, 0x0B2C, 0x0B2D, 0x0B2E, 0x0B2F, 0x0B30, 0x0B31, 0x0B32, 0x0B33, 0x0B34, 0x0B35, 0x0B36, 0x0B37, 0x0B38, 0x0B39, 0x0B3A, 0x0B3B, 0x0B3C, 0x0B3D, 0x0B3E, 0x0B3F, 0x0B40, 0x0B41, 0x0B42, 0x0B43, 0x0B44, 0x0B45, 0x0B46, 0x0B47, 0x0B48, 0x0B49, 0x0B4A, 0x0B4B, 0x0B4C, 0x0B4D, 0x0B4E, 0x0B4F, 0x0B50, 0x0B51, 0x0B52, 0x0B53, 0x0B54, 0x0B55, 0x0B56, 0x0B57, 0x0B58, 0x0B59, 0x0B5A, 0x0B5B, 0x0B5C, 0x0B5D, 0x0B5E, 0x0B5F, 0x0B60, 0x0B61, 0x0B62, 0x0B63, 0x0B64, 0x0B65, 0x0B66, 0x0B67, 0x0B68, 0x0B69, 0x0B6A, 0x0B6B, 0x0B6C, 0x0B6D, 0x0B6E, 0x0B6F, 0x0B70, 0x0B71, 0x0B72, 0x0B73, 0x0B74, 0x0B75, 0x0B76, 0x0B77, 0x0B78, 0x0B79, 0x0B7A, 0x0B7B, 0x0B7C, 0x0B7D, 0x0B7E, 0x0B7F, 0x0B80, 0x0B81, 0x0B82, 0x0B83, 0x0B84, 0x0B85, 0x0B86, 0x0B87, 0x0B88, 0x0B89, 0x0B8A, 0x0B8B, 0x0B8C, 0x0B8D, 0x0B8E, 0x0B8F, 0x0B90, 0x0B91, 0x0B92, 0x0B93, 0x0B94, 0x0B95, 0x0B96, 0x0B97, 0x0B98, 0x0B99, 0x0B9A, 0x0B9B, 0x0B9C, 0x0B9D, 0x0B9E, 0x0B9F, 0x0BA0, 0x0BA1, 0x0BA2, 0x0BA3, 0x0BA4, 0x0BA5, 0x0BA6, 0x0BA7, 0x0BA8, 0x0BA9, 0x0BAA, 0x0BAB, 0x0BAC, 0x0BAD, 0x0BAE, 0x0BAF, 0x0BB0, 0x0BB1, 0x0BB2, 0x0BB3, 0x0BB4, 0x0BB5, 0x0BB6, 0x0BB7, 0x0BB8, 0x0BB9, 0x0BBA, 0x0BBB, 0x0BBC, 0x0BBD, 0x0BBE, 0x0BBF, 0x0BC0, 0x0BC1, 0x0BC2, 0x0BC3, 0x0BC4, 0x0BC5, 0x0BC6, 0x0BC7, 0x0BC8, 0x0BC9, 0x0BCA, 0x0BCB, 0x0BCC, 0x0BCD, 0x0BCE, 0x0BCF, 0x0BD0, 0x0BD1, 0x0BD2, 0x0BD3, 0x0BD4, 0x0BD5, 0x0BD6, 0x0BD7, 0x0BD8, 0x0BD9, 0x0BDA, 0x0BDB, 0x0BDC, 0x0BDD, 0x0BDE, 0x0BDF, 0x0BE0, 0x0BE1, 0x0BE2, 0x0BE3, 0x0BE4, 0x0BE5, 0x0BE6, 0x0BE7, 0x0BE8, 0x0BE9, 0x0BEA, 0x0BEB, 0x0BEC, 0x0BED, 0x0BEE, 0x0BEF, 0x0BF0, 0x0BF1, 0x0BF2, 0x0BF3, 0x0BF4, 0x0BF5, 0x0BF6, 0x0BF7, 0x0BF8, 0x0BF9, 0x0BFA, 0x0BFB, 0x0BFC, 0x0BFD, 0x0BFE, 0x0BFF, 0x0C00, 0x0C01, 0x0C02, 0x0C03, 0x0C04, 0x0C05, 0x0C06, 0x0C07, 0x0C08, 0x0C09, 0x0C0A, 0x0C0B, 0x0C0C, 0x0C0D, 0x0C0E, 0x0C0F, 0x0C10, 0x0C11, 0x0C12, 0x0C13, 0x0C14, 0x0C15, 0x0C16, 0x0C17, 0x0C18, 0x0C19, 0x0C1A, 0x0C1B, 0x0C1C, 0x0C1D, 0x0C1E, 0x0C1F, 0x0C20, 0x0C21, 0x0C22, 0x0C23, 0x0C24, 0x0C25, 0x0C26, 0x0C27, 0x0C28, 0x0C29, 0x0C2A, 0x0C2B, 0x0C2C, 0x0C2D, 0x0C2E, 0x0C2F, 0x0C30, 0x0C31, 0x0C32, 0x0C33, 0x0C34, 0x0C35, 0x0C36, 0x0C37, 0x0C38, 0x0C39, 0x0C3A, 0x0C3B, 0x0C3C, 0x0C3D, 0x0C3E, 0x0C3F, 0x0C40, 0x0C41, 0x0C42, 0x0C43, 0x0C44, 0x0C45, 0x0C46, 0x0C47, 0x0C48, 0x0C49, 0x0C4A, 0x0C4B, 0x0C4C, 0x0C4D, 0x0C4E, 0x0C4F, 0x0C50, 0x0C51, 0x0C52, 0x0C53, 0x0C54, 0x0C55, 0x0C56, 0x0C57, 0x0C58, 0x0C59, 0x0C5A, 0x0C5B, 0x0C5C, 0x0C5D, 0x0C5E, 0x0C5F, 0x0C60, 0x0C61, 0x0C62, 0x0C63, 0x0C64, 0x0C65, 0x0C66, 0x0C67, 0x0C68, 0x0C69, 0x0C6A, 0x0C6B, 0x0C6C, 0x0C6D, 0x0C6E, 0x0C6F, 0x0C70, 0x0C71, 0x0C72, 0x0C73, 0x0C74, 0x0C75, 0x0C76, 0x0C77, 0x0C78, 0x0C79, 0x0C7A, 0x0C7B, 0x0C7C, 0x0C7D, 0x0C7E, 0x0C7F, 0x0C80, 0x0C81, 0x0C82, 0x0C83, 0x0C84, 0x0C85, 0x0C86, 0x0C87, 0x0C88, 0x0C89, 0x0C8A, 0x0C8B, 0x0C8C, 0x0C8D, 0x0C8E, 0x0C8F, 0x0C90, 0x0C91, 0x0C92, 0x0C93, 0x0C94, 0x0C95, 0x0C96, 0x0C97, 0x0C98, 0x0C99, 0x0C9A, 0x0C9B, 0x0C9C, 0x0C9D, 0x0C9E, 0x0C9F, 0x0CA0, 0x0CA1, 0x0CA2, 0x0CA3, 0x0CA4, 0x0CA5, 0x0CA6, 0x0CA7, 0x0CA8, 0x0CA9, 0x0CAA, 0x0CAB, 0x0CAC, 0x0CAD, 0x0CAE, 0x0CAF, 0x0CB0, 0x0CB1, 0x0CB2, 0x0CB3, 0x0CB4, 0x0CB5, 0x0CB6, 0x0CB7, 0x0CB8, 0x0CB9, 0x0CBA, 0x0CBB, 0x0CBC, 0x0CBD, 0x0CBE, 0x0CBF, 0x0CC0, 0x0CC1, 0x0CC2, 0x0CC3, 0x0CC4, 0x0CC5, 0x0CC6, 0x0CC7, 0x0CC8, 0x0CC9, 0x0CCA, 0x0CCB, 0x0CCC, 0x0CCD, 0x0CCE, 0x0CCF, 0x0CD0, 0x0CD1, 0x0CD2, 0x0CD3, 0x0CD4, 0x0CD5, 0x0CD6, 0x0CD7, 0x0CD8, 0x0CD9, 0x0CDA, 0x0CDB, 0x0CDC, 0x0CDD, 0x0CDE, 0x0CDF, 0x0CE0, 0x0CE1, 0x0CE2, 0x0CE3, 0x0CE4, 0x0CE5, 0x0CE6, 0x0CE7, 0x0CE8, 0x0CE9, 0x0CEA, 0x0CEB, 0x0CEC, 0x0CED, 0x0CEE, 0x0CEF, 0x0CF0, 0x0CF1, 0x0CF2, 0x0CF3, 0x0CF4, 0x0CF5, 0x0CF6, 0x0CF7, 0x0CF8, 0x0CF9, 0x0CFA, 0x0CFB, 0x0CFC, 0x0CFD, 0x0CFE, 0x0CFF, 0x0D00, 0x0D01, 0x0D02, 0x0D03, 0x0D04, 0x0D05, 0x0D06, 0x0D07, 0x0D08, 0x0D09, 0x0D0A, 0x0D0B, 0x0D0C, 0x0D0D, 0x0D0E, 0x0D0F, 0x0D10, 0x0D11, 0x0D12, 0x0D13, 0x0D14, 0x0D15, 0x0D16, 0x0D17, 0x0D18, 0x0D19, 0x0D1A, 0x0D1B, 0x0D1C, 0x0D1D, 0x0D1E, 0x0D1F, 0x0D20, 0x0D21, 0x0D22, 0x0D23, 0x0D24, 0x0D25, 0x0D26, 0x0D27, 0x0D28, 0x0D29, 0x0D2A, 0x0D2B, 0x0D2C, 0x0D2D, 0x0D2E, 0x0D31, 0x0D32, 0x0D33, 0x0D34, 0x0D35, 0x0D36, 0x0D37, 0x0D38, 0x0D39, 0x0D3A, 0x0D3B, 0x0D3C, 0x0D3D, 0x0D3E, 0x0D3F, 0x0D40, 0x0D41, 0x0D42, 0x0D43, 0x0D44, 0x0D45, 0x0D46, 0x0D47, 0x0D48, 0x0D49, 0x0D4A, 0x0D4B, 0x0D4C, 0x0D4D, 0x0D4E, 0x0D4F, 0x0D50, 0x0D51, 0x0D61, 0x0D62, 0x0D63, 0x0D64, 0x0D65, 0xE000, 0x25BC, 0x25BD };
        public static List<ushort> unicodeChar = new List<ushort> {0x0000,0x3000,0x3041,0x3042,0x3043,0x3044,0x3045,0x3046,0x3047,0x3048,0x3049,0x304A,0x304B,0x304C,0x304D,0x304E,0x304F,0x3050,0x3051,0x3052,0x3053,0x3054,0x3055,0x3056,0x3057,0x3058,0x3059,0x305A,0x305B,0x305C,0x305D,0x305E,0x305F,0x3060,0x3061,0x3062,0x3063,0x3064,0x3065,0x3066,0x3067,0x3068,0x3069,0x306A,0x306B,0x306C,0x306D,0x306E,0x306F,0x3070,0x3071,0x3072,0x3073,0x3074,0x3075,0x3076,0x3077,0x3078,0x3079,0x307A,0x307B,0x307C,0x307D,0x307E,0x307F,0x3080,0x3081,0x3082,0x3083,0x3084,0x3085,0x3086,0x3087,0x3088,0x3089,0x308A,0x308B,0x308C,0x308D,0x308F,0x3092,0x3093,0x30A1,0x30A2,0x30A3,0x30A4,0x30A5,0x30A6,0x30A7,0x30A8,0x30A9,0x30AA,0x30AB,0x30AC,0x30AD,0x30AE,0x30AF,0x30B0,0x30B1,0x30B2,0x30B3,0x30B4,0x30B5,0x30B6,0x30B7,0x30B8,0x30B9,0x30BA,0x30BB,0x30BC,0x30BD,0x30BE,0x30BF,0x30C0,0x30C1,0x30C2,0x30C3,0x30C4,0x30C5,0x30C6,0x30C7,0x30C8,0x30C9,0x30CA,0x30CB,0x30CC,0x30CD,0x30CE,0x30CF,0x30D0,0x30D1,0x30D2,0x30D3,0x30D4,0x30D5,0x30D6,0x30D7,0x30D8,0x30D9,0x30DA,0x30DB,0x30DC,0x30DD,0x30DE,0x30DF,0x30E0,0x30E1,0x30E2,0x30E3,0x30E4,0x30E5,0x30E6,0x30E7,0x30E8,0x30E9,0x30EA,0x30EB,0x30EC,0x30ED,0x30EF,0x30F2,0x30F3,0xFF10,0xFF11,0xFF12,0xFF13,0xFF14,0xFF15,0xFF16,0xFF17,0xFF18,0xFF19,0xFF21,0xFF22,0xFF23,0xFF24,0xFF25,0xFF26,0xFF27,0xFF28,0xFF29,0xFF2A,0xFF2B,0xFF2C,0xFF2D,0xFF2E,0xFF2F,0xFF30,0xFF31,0xFF32,0xFF33,0xFF34,0xFF35,0xFF36,0xFF37,0xFF38,0xFF39,0xFF3A,0xFF41,0xFF42,0xFF43,0xFF44,0xFF45,0xFF46,0xFF47,0xFF48,0xFF49,0xFF4A,0xFF4B,0xFF4C,0xFF4D,0xFF4E,0xFF4F,0xFF50,0xFF51,0xFF52,0xFF53,0xFF54,0xFF55,0xFF56,0xFF57,0xFF58,0xFF59,0xFF5A,0xFF01,0xFF1F,0x3001,0x3002,0x22EF,0x30FB,0xFF0F,0x300C,0x300D,0x300E,0x300F,0xFF08,0xFF09,0x329A,0x329B,0xFF0B,0xFF0D,0x2297,0x2298,0xFF1D,0xFF5A,0xFF1A,0xFF1B,0xFF0E,0xFF0C,0x2664,0x2667,0x2661,0x2662,0x2606,0x25CE,0x25CB,0x25A1,0x25B3,0x25C7,0xFF20,0x266B,0xFF05,0x263C,0x2614,0x2630,0x2744,0x260B,0x2654,0x2655,0x260A,0x21D7,0x21D8,0x263E,0x00A5,0x2648,0x2649,0x264A,0x264B,0x264C,0x264D,0x264E,0x264F,0x2190,0x2191,0x2193,0x2192,0x2023,0xFF06,0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF,0x0152,0x0153,0x015E,0x015F,0x00AA,0x00BA,0x00B9,0x00B2,0x00B3,0x0024,0x00A1,0x00BF,0x0021,0x003F,0x002C,0x002E,0x2026,0x00B7,0x002F,0x2018,0x2019,0x201C,0x201D,0x201E,0x300A,0x300B,0x0028,0x0029,0x2642,0x2640,0x002B,0x002D,0x002A,0x0023,0x003D,0x0026,0x007E,0x003A,0x003B,0x2660,0x2663,0x2665,0x2666,0x2605,0x25C9,0x25CF,0x25A0,0x25B2,0x25C6,0x0040,0x266A,0x0025,0x2600,0x2601,0x2602,0x2603,0x263A,0x265A,0x265B,0x2639,0x2197,0x2198,0x263D,0x0020,0x2074,0x20A7,0x20A6,0x00B0,0x005F,0xFF3F,0xAC00,0xAC01,0xAC04,0xAC07,0xAC08,0xAC09,0xAC0A,0xAC10,0xAC11,0xAC12,0xAC13,0xAC14,0xAC15,0xAC16,0xAC17,0xAC19,0xAC1A,0xAC1B,0xAC1C,0xAC1D,0xAC20,0xAC24,0xAC2C,0xAC2D,0xAC2F,0xAC30,0xAC31,0xAC38,0xAC39,0xAC3C,0xAC40,0xAC4B,0xAC4D,0xAC54,0xAC58,0xAC5C,0xAC70,0xAC71,0xAC74,0xAC77,0xAC78,0xAC7A,0xAC80,0xAC81,0xAC83,0xAC84,0xAC85,0xAC86,0xAC89,0xAC8A,0xAC8B,0xAC8C,0xAC90,0xAC94,0xAC9C,0xAC9D,0xAC9F,0xACA0,0xACA1,0xACA8,0xACA9,0xACAA,0xACAC,0xACAF,0xACB0,0xACB8,0xACB9,0xACBB,0xACBC,0xACBD,0xACC1,0xACC4,0xACC8,0xACCC,0xACD5,0xACD7,0xACE0,0xACE1,0xACE4,0xACE7,0xACE8,0xACEA,0xACEC,0xACEF,0xACF0,0xACF1,0xACF3,0xACF5,0xACF6,0xACFC,0xACFD,0xAD00,0xAD04,0xAD06,0xAD0C,0xAD0D,0xAD0F,0xAD11,0xAD18,0xAD1C,0xAD20,0xAD29,0xAD2C,0xAD2D,0xAD34,0xAD35,0xAD38,0xAD3C,0xAD44,0xAD45,0xAD47,0xAD49,0xAD50,0xAD54,0xAD58,0xAD61,0xAD63,0xAD6C,0xAD6D,0xAD70,0xAD73,0xAD74,0xAD75,0xAD76,0xAD7B,0xAD7C,0xAD7D,0xAD7F,0xAD81,0xAD82,0xAD88,0xAD89,0xAD8C,0xAD90,0xAD9C,0xAD9D,0xADA4,0xADB7,0xADC0,0xADC1,0xADC4,0xADC8,0xADD0,0xADD1,0xADD3,0xADDC,0xADE0,0xADE4,0xADF8,0xADF9,0xADFC,0xADFF,0xAE00,0xAE01,0xAE08,0xAE09,0xAE0B,0xAE0D,0xAE14,0xAE30,0xAE31,0xAE34,0xAE37,0xAE38,0xAE3A,0xAE40,0xAE41,0xAE43,0xAE45,0xAE46,0xAE4A,0xAE4C,0xAE4D,0xAE4E,0xAE50,0xAE54,0xAE56,0xAE5C,0xAE5D,0xAE5F,0xAE60,0xAE61,0xAE65,0xAE68,0xAE69,0xAE6C,0xAE70,0xAE78,0xAE79,0xAE7B,0xAE7C,0xAE7D,0xAE84,0xAE85,0xAE8C,0xAEBC,0xAEBD,0xAEBE,0xAEC0,0xAEC4,0xAECC,0xAECD,0xAECF,0xAED0,0xAED1,0xAED8,0xAED9,0xAEDC,0xAEE8,0xAEEB,0xAEED,0xAEF4,0xAEF8,0xAEFC,0xAF07,0xAF08,0xAF0D,0xAF10,0xAF2C,0xAF2D,0xAF30,0xAF32,0xAF34,0xAF3C,0xAF3D,0xAF3F,0xAF41,0xAF42,0xAF43,0xAF48,0xAF49,0xAF50,0xAF5C,0xAF5D,0xAF64,0xAF65,0xAF79,0xAF80,0xAF84,0xAF88,0xAF90,0xAF91,0xAF95,0xAF9C,0xAFB8,0xAFB9,0xAFBC,0xAFC0,0xAFC7,0xAFC8,0xAFC9,0xAFCB,0xAFCD,0xAFCE,0xAFD4,0xAFDC,0xAFE8,0xAFE9,0xAFF0,0xAFF1,0xAFF4,0xAFF8,0xB000,0xB001,0xB004,0xB00C,0xB010,0xB014,0xB01C,0xB01D,0xB028,0xB044,0xB045,0xB048,0xB04A,0xB04C,0xB04E,0xB053,0xB054,0xB055,0xB057,0xB059,0xB05D,0xB07C,0xB07D,0xB080,0xB084,0xB08C,0xB08D,0xB08F,0xB091,0xB098,0xB099,0xB09A,0xB09C,0xB09F,0xB0A0,0xB0A1,0xB0A2,0xB0A8,0xB0A9,0xB0AB,0xB0AC,0xB0AD,0xB0AE,0xB0AF,0xB0B1,0xB0B3,0xB0B4,0xB0B5,0xB0B8,0xB0BC,0xB0C4,0xB0C5,0xB0C7,0xB0C8,0xB0C9,0xB0D0,0xB0D1,0xB0D4,0xB0D8,0xB0E0,0xB0E5,0xB108,0xB109,0xB10B,0xB10C,0xB110,0xB112,0xB113,0xB118,0xB119,0xB11B,0xB11C,0xB11D,0xB123,0xB124,0xB125,0xB128,0xB12C,0xB134,0xB135,0xB137,0xB138,0xB139,0xB140,0xB141,0xB144,0xB148,0xB150,0xB151,0xB154,0xB155,0xB158,0xB15C,0xB160,0xB178,0xB179,0xB17C,0xB180,0xB182,0xB188,0xB189,0xB18B,0xB18D,0xB192,0xB193,0xB194,0xB198,0xB19C,0xB1A8,0xB1CC,0xB1D0,0xB1D4,0xB1DC,0xB1DD,0xB1DF,0xB1E8,0xB1E9,0xB1EC,0xB1F0,0xB1F9,0xB1FB,0xB1FD,0xB204,0xB205,0xB208,0xB20B,0xB20C,0xB214,0xB215,0xB217,0xB219,0xB220,0xB234,0xB23C,0xB258,0xB25C,0xB260,0xB268,0xB269,0xB274,0xB275,0xB27C,0xB284,0xB285,0xB289,0xB290,0xB291,0xB294,0xB298,0xB299,0xB29A,0xB2A0,0xB2A1,0xB2A3,0xB2A5,0xB2A6,0xB2AA,0xB2AC,0xB2B0,0xB2B4,0xB2C8,0xB2C9,0xB2CC,0xB2D0,0xB2D2,0xB2D8,0xB2D9,0xB2DB,0xB2DD,0xB2E2,0xB2E4,0xB2E5,0xB2E6,0xB2E8,0xB2EB,0xB2EC,0xB2ED,0xB2EE,0xB2EF,0xB2F3,0xB2F4,0xB2F5,0xB2F7,0xB2F8,0xB2F9,0xB2FA,0xB2FB,0xB2FF,0xB300,0xB301,0xB304,0xB308,0xB310,0xB311,0xB313,0xB314,0xB315,0xB31C,0xB354,0xB355,0xB356,0xB358,0xB35B,0xB35C,0xB35E,0xB35F,0xB364,0xB365,0xB367,0xB369,0xB36B,0xB36E,0xB370,0xB371,0xB374,0xB378,0xB380,0xB381,0xB383,0xB384,0xB385,0xB38C,0xB390,0xB394,0xB3A0,0xB3A1,0xB3A8,0xB3AC,0xB3C4,0xB3C5,0xB3C8,0xB3CB,0xB3CC,0xB3CE,0xB3D0,0xB3D4,0xB3D5,0xB3D7,0xB3D9,0xB3DB,0xB3DD,0xB3E0,0xB3E4,0xB3E8,0xB3FC,0xB410,0xB418,0xB41C,0xB420,0xB428,0xB429,0xB42B,0xB434,0xB450,0xB451,0xB454,0xB458,0xB460,0xB461,0xB463,0xB465,0xB46C,0xB480,0xB488,0xB49D,0xB4A4,0xB4A8,0xB4AC,0xB4B5,0xB4B7,0xB4B9,0xB4C0,0xB4C4,0xB4C8,0xB4D0,0xB4D5,0xB4DC,0xB4DD,0xB4E0,0xB4E3,0xB4E4,0xB4E6,0xB4EC,0xB4ED,0xB4EF,0xB4F1,0xB4F8,0xB514,0xB515,0xB518,0xB51B,0xB51C,0xB524,0xB525,0xB527,0xB528,0xB529,0xB52A,0xB530,0xB531,0xB534,0xB538,0xB540,0xB541,0xB543,0xB544,0xB545,0xB54B,0xB54C,0xB54D,0xB550,0xB554,0xB55C,0xB55D,0xB55F,0xB560,0xB561,0xB5A0,0xB5A1,0xB5A4,0xB5A8,0xB5AA,0xB5AB,0xB5B0,0xB5B1,0xB5B3,0xB5B4,0xB5B5,0xB5BB,0xB5BC,0xB5BD,0xB5C0,0xB5C4,0xB5CC,0xB5CD,0xB5CF,0xB5D0,0xB5D1,0xB5D8,0xB5EC,0xB610,0xB611,0xB614,0xB618,0xB625,0xB62C,0xB634,0xB648,0xB664,0xB668,0xB69C,0xB69D,0xB6A0,0xB6A4,0xB6AB,0xB6AC,0xB6B1,0xB6D4,0xB6F0,0xB6F4,0xB6F8,0xB700,0xB701,0xB705,0xB728,0xB729,0xB72C,0xB72F,0xB730,0xB738,0xB739,0xB73B,0xB744,0xB748,0xB74C,0xB754,0xB755,0xB760,0xB764,0xB768,0xB770,0xB771,0xB773,0xB775,0xB77C,0xB77D,0xB780,0xB784,0xB78C,0xB78D,0xB78F,0xB790,0xB791,0xB792,0xB796,0xB797,0xB798,0xB799,0xB79C,0xB7A0,0xB7A8,0xB7A9,0xB7AB,0xB7AC,0xB7AD,0xB7B4,0xB7B5,0xB7B8,0xB7C7,0xB7C9,0xB7EC,0xB7ED,0xB7F0,0xB7F4,0xB7FC,0xB7FD,0xB7FF,0xB800,0xB801,0xB807,0xB808,0xB809,0xB80C,0xB810,0xB818,0xB819,0xB81B,0xB81D,0xB824,0xB825,0xB828,0xB82C,0xB834,0xB835,0xB837,0xB838,0xB839,0xB840,0xB844,0xB851,0xB853,0xB85C,0xB85D,0xB860,0xB864,0xB86C,0xB86D,0xB86F,0xB871,0xB878,0xB87C,0xB88D,0xB8A8,0xB8B0,0xB8B4,0xB8B8,0xB8C0,0xB8C1,0xB8C3,0xB8C5,0xB8CC,0xB8D0,0xB8D4,0xB8DD,0xB8DF,0xB8E1,0xB8E8,0xB8E9,0xB8EC,0xB8F0,0xB8F8,0xB8F9,0xB8FB,0xB8FD,0xB904,0xB918,0xB920,0xB93C,0xB93D,0xB940,0xB944,0xB94C,0xB94F,0xB951,0xB958,0xB959,0xB95C,0xB960,0xB968,0xB969,0xB96B,0xB96D,0xB974,0xB975,0xB978,0xB97C,0xB984,0xB985,0xB987,0xB989,0xB98A,0xB98D,0xB98E,0xB9AC,0xB9AD,0xB9B0,0xB9B4,0xB9BC,0xB9BD,0xB9BF,0xB9C1,0xB9C8,0xB9C9,0xB9CC,0xB9CE,0xB9CF,0xB9D0,0xB9D1,0xB9D2,0xB9D8,0xB9D9,0xB9DB,0xB9DD,0xB9DE,0xB9E1,0xB9E3,0xB9E4,0xB9E5,0xB9E8,0xB9EC,0xB9F4,0xB9F5,0xB9F7,0xB9F8,0xB9F9,0xB9FA,0xBA00,0xBA01,0xBA08,0xBA15,0xBA38,0xBA39,0xBA3C,0xBA40,0xBA42,0xBA48,0xBA49,0xBA4B,0xBA4D,0xBA4E,0xBA53,0xBA54,0xBA55,0xBA58,0xBA5C,0xBA64,0xBA65,0xBA67,0xBA68,0xBA69,0xBA70,0xBA71,0xBA74,0xBA78,0xBA83,0xBA84,0xBA85,0xBA87,0xBA8C,0xBAA8,0xBAA9,0xBAAB,0xBAAC,0xBAB0,0xBAB2,0xBAB8,0xBAB9,0xBABB,0xBABD,0xBAC4,0xBAC8,0xBAD8,0xBAD9,0xBAFC,0xBB00,0xBB04,0xBB0D,0xBB0F,0xBB11,0xBB18,0xBB1C,0xBB20,0xBB29,0xBB2B,0xBB34,0xBB35,0xBB36,0xBB38,0xBB3B,0xBB3C,0xBB3D,0xBB3E,0xBB44,0xBB45,0xBB47,0xBB49,0xBB4D,0xBB4F,0xBB50,0xBB54,0xBB58,0xBB61,0xBB63,0xBB6C,0xBB88,0xBB8C,0xBB90,0xBBA4,0xBBA8,0xBBAC,0xBBB4,0xBBB7,0xBBC0,0xBBC4,0xBBC8,0xBBD0,0xBBD3,0xBBF8,0xBBF9,0xBBFC,0xBBFF,0xBC00,0xBC02,0xBC08,0xBC09,0xBC0B,0xBC0C,0xBC0D,0xBC0F,0xBC11,0xBC14,0xBC15,0xBC16,0xBC17,0xBC18,0xBC1B,0xBC1C,0xBC1D,0xBC1E,0xBC1F,0xBC24,0xBC25,0xBC27,0xBC29,0xBC2D,0xBC30,0xBC31,0xBC34,0xBC38,0xBC40,0xBC41,0xBC43,0xBC44,0xBC45,0xBC49,0xBC4C,0xBC4D,0xBC50,0xBC5D,0xBC84,0xBC85,0xBC88,0xBC8B,0xBC8C,0xBC8E,0xBC94,0xBC95,0xBC97,0xBC99,0xBC9A,0xBCA0,0xBCA1,0xBCA4,0xBCA7,0xBCA8,0xBCB0,0xBCB1,0xBCB3,0xBCB4,0xBCB5,0xBCBC,0xBCBD,0xBCC0,0xBCC4,0xBCCD,0xBCCF,0xBCD0,0xBCD1,0xBCD5,0xBCD8,0xBCDC,0xBCF4,0xBCF5,0xBCF6,0xBCF8,0xBCFC,0xBD04,0xBD05,0xBD07,0xBD09,0xBD10,0xBD14,0xBD24,0xBD2C,0xBD40,0xBD48,0xBD49,0xBD4C,0xBD50,0xBD58,0xBD59,0xBD64,0xBD68,0xBD80,0xBD81,0xBD84,0xBD87,0xBD88,0xBD89,0xBD8A,0xBD90,0xBD91,0xBD93,0xBD95,0xBD99,0xBD9A,0xBD9C,0xBDA4,0xBDB0,0xBDB8,0xBDD4,0xBDD5,0xBDD8,0xBDDC,0xBDE9,0xBDF0,0xBDF4,0xBDF8,0xBE00,0xBE03,0xBE05,0xBE0C,0xBE0D,0xBE10,0xBE14,0xBE1C,0xBE1D,0xBE1F,0xBE44,0xBE45,0xBE48,0xBE4C,0xBE4E,0xBE54,0xBE55,0xBE57,0xBE59,0xBE5A,0xBE5B,0xBE60,0xBE61,0xBE64,0xBE68,0xBE6A,0xBE70,0xBE71,0xBE73,0xBE74,0xBE75,0xBE7B,0xBE7C,0xBE7D,0xBE80,0xBE84,0xBE8C,0xBE8D,0xBE8F,0xBE90,0xBE91,0xBE98,0xBE99,0xBEA8,0xBED0,0xBED1,0xBED4,0xBED7,0xBED8,0xBEE0,0xBEE3,0xBEE4,0xBEE5,0xBEEC,0xBF01,0xBF08,0xBF09,0xBF18,0xBF19,0xBF1B,0xBF1C,0xBF1D,0xBF40,0xBF41,0xBF44,0xBF48,0xBF50,0xBF51,0xBF55,0xBF94,0xBFB0,0xBFC5,0xBFCC,0xBFCD,0xBFD0,0xBFD4,0xBFDC,0xBFDF,0xBFE1,0xC03C,0xC051,0xC058,0xC05C,0xC060,0xC068,0xC069,0xC090,0xC091,0xC094,0xC098,0xC0A0,0xC0A1,0xC0A3,0xC0A5,0xC0AC,0xC0AD,0xC0AF,0xC0B0,0xC0B3,0xC0B4,0xC0B5,0xC0B6,0xC0BC,0xC0BD,0xC0BF,0xC0C0,0xC0C1,0xC0C5,0xC0C8,0xC0C9,0xC0CC,0xC0D0,0xC0D8,0xC0D9,0xC0DB,0xC0DC,0xC0DD,0xC0E4,0xC0E5,0xC0E8,0xC0EC,0xC0F4,0xC0F5,0xC0F7,0xC0F9,0xC100,0xC104,0xC108,0xC110,0xC115,0xC11C,0xC11D,0xC11E,0xC11F,0xC120,0xC123,0xC124,0xC126,0xC127,0xC12C,0xC12D,0xC12F,0xC130,0xC131,0xC136,0xC138,0xC139,0xC13C,0xC140,0xC148,0xC149,0xC14B,0xC14C,0xC14D,0xC154,0xC155,0xC158,0xC15C,0xC164,0xC165,0xC167,0xC168,0xC169,0xC170,0xC174,0xC178,0xC185,0xC18C,0xC18D,0xC18E,0xC190,0xC194,0xC196,0xC19C,0xC19D,0xC19F,0xC1A1,0xC1A5,0xC1A8,0xC1A9,0xC1AC,0xC1B0,0xC1BD,0xC1C4,0xC1C8,0xC1CC,0xC1D4,0xC1D7,0xC1D8,0xC1E0,0xC1E4,0xC1E8,0xC1F0,0xC1F1,0xC1F3,0xC1FC,0xC1FD,0xC200,0xC204,0xC20C,0xC20D,0xC20F,0xC211,0xC218,0xC219,0xC21C,0xC21F,0xC220,0xC228,0xC229,0xC22B,0xC22D,0xC22F,0xC231,0xC232,0xC234,0xC248,0xC250,0xC251,0xC254,0xC258,0xC260,0xC265,0xC26C,0xC26D,0xC270,0xC274,0xC27C,0xC27D,0xC27F,0xC281,0xC288,0xC289,0xC290,0xC298,0xC29B,0xC29D,0xC2A4,0xC2A5,0xC2A8,0xC2AC,0xC2AD,0xC2B4,0xC2B5,0xC2B7,0xC2B9,0xC2DC,0xC2DD,0xC2E0,0xC2E3,0xC2E4,0xC2EB,0xC2EC,0xC2ED,0xC2EF,0xC2F1,0xC2F6,0xC2F8,0xC2F9,0xC2FB,0xC2FC,0xC300,0xC308,0xC309,0xC30C,0xC30D,0xC313,0xC314,0xC315,0xC318,0xC31C,0xC324,0xC325,0xC328,0xC329,0xC345,0xC368,0xC369,0xC36C,0xC370,0xC372,0xC378,0xC379,0xC37C,0xC37D,0xC384,0xC388,0xC38C,0xC3C0,0xC3D8,0xC3D9,0xC3DC,0xC3DF,0xC3E0,0xC3E2,0xC3E8,0xC3E9,0xC3ED,0xC3F4,0xC3F5,0xC3F8,0xC408,0xC410,0xC424,0xC42C,0xC430,0xC434,0xC43C,0xC43D,0xC448,0xC464,0xC465,0xC468,0xC46C,0xC474,0xC475,0xC479,0xC480,0xC494,0xC49C,0xC4B8,0xC4BC,0xC4E9,0xC4F0,0xC4F1,0xC4F4,0xC4F8,0xC4FA,0xC4FF,0xC500,0xC501,0xC50C,0xC510,0xC514,0xC51C,0xC528,0xC529,0xC52C,0xC530,0xC538,0xC539,0xC53B,0xC53D,0xC544,0xC545,0xC548,0xC549,0xC54A,0xC54C,0xC54D,0xC54E,0xC553,0xC554,0xC555,0xC557,0xC558,0xC559,0xC55D,0xC55E,0xC560,0xC561,0xC564,0xC568,0xC570,0xC571,0xC573,0xC574,0xC575,0xC57C,0xC57D,0xC580,0xC584,0xC587,0xC58C,0xC58D,0xC58F,0xC591,0xC595,0xC597,0xC598,0xC59C,0xC5A0,0xC5A9,0xC5B4,0xC5B5,0xC5B8,0xC5B9,0xC5BB,0xC5BC,0xC5BD,0xC5BE,0xC5C4,0xC5C5,0xC5C6,0xC5C7,0xC5C8,0xC5C9,0xC5CA,0xC5CC,0xC5CE,0xC5D0,0xC5D1,0xC5D4,0xC5D8,0xC5E0,0xC5E1,0xC5E3,0xC5E5,0xC5EC,0xC5ED,0xC5EE,0xC5F0,0xC5F4,0xC5F6,0xC5F7,0xC5FC,0xC5FD,0xC5FE,0xC5FF,0xC600,0xC601,0xC605,0xC606,0xC607,0xC608,0xC60C,0xC610,0xC618,0xC619,0xC61B,0xC61C,0xC624,0xC625,0xC628,0xC62C,0xC62D,0xC62E,0xC630,0xC633,0xC634,0xC635,0xC637,0xC639,0xC63B,0xC640,0xC641,0xC644,0xC648,0xC650,0xC651,0xC653,0xC654,0xC655,0xC65C,0xC65D,0xC660,0xC66C,0xC66F,0xC671,0xC678,0xC679,0xC67C,0xC680,0xC688,0xC689,0xC68B,0xC68D,0xC694,0xC695,0xC698,0xC69C,0xC6A4,0xC6A5,0xC6A7,0xC6A9,0xC6B0,0xC6B1,0xC6B4,0xC6B8,0xC6B9,0xC6BA,0xC6C0,0xC6C1,0xC6C3,0xC6C5,0xC6CC,0xC6CD,0xC6D0,0xC6D4,0xC6DC,0xC6DD,0xC6E0,0xC6E1,0xC6E8,0xC6E9,0xC6EC,0xC6F0,0xC6F8,0xC6F9,0xC6FD,0xC704,0xC705,0xC708,0xC70C,0xC714,0xC715,0xC717,0xC719,0xC720,0xC721,0xC724,0xC728,0xC730,0xC731,0xC733,0xC735,0xC737,0xC73C,0xC73D,0xC740,0xC744,0xC74A,0xC74C,0xC74D,0xC74F,0xC751,0xC752,0xC753,0xC754,0xC755,0xC756,0xC757,0xC758,0xC75C,0xC760,0xC768,0xC76B,0xC774,0xC775,0xC778,0xC77C,0xC77D,0xC77E,0xC783,0xC784,0xC785,0xC787,0xC788,0xC789,0xC78A,0xC78E,0xC790,0xC791,0xC794,0xC796,0xC797,0xC798,0xC79A,0xC7A0,0xC7A1,0xC7A3,0xC7A4,0xC7A5,0xC7A6,0xC7AC,0xC7AD,0xC7B0,0xC7B4,0xC7BC,0xC7BD,0xC7BF,0xC7C0,0xC7C1,0xC7C8,0xC7C9,0xC7CC,0xC7CE,0xC7D0,0xC7D8,0xC7DD,0xC7E4,0xC7E8,0xC7EC,0xC800,0xC801,0xC804,0xC808,0xC80A,0xC810,0xC811,0xC813,0xC815,0xC816,0xC81C,0xC81D,0xC820,0xC824,0xC82C,0xC82D,0xC82F,0xC831,0xC838,0xC83C,0xC840,0xC848,0xC849,0xC84C,0xC84D,0xC854,0xC870,0xC871,0xC874,0xC878,0xC87A,0xC880,0xC881,0xC883,0xC885,0xC886,0xC887,0xC88B,0xC88C,0xC88D,0xC894,0xC89D,0xC89F,0xC8A1,0xC8A8,0xC8BC,0xC8BD,0xC8C4,0xC8C8,0xC8CC,0xC8D4,0xC8D5,0xC8D7,0xC8D9,0xC8E0,0xC8E1,0xC8E4,0xC8F5,0xC8FC,0xC8FD,0xC900,0xC904,0xC905,0xC906,0xC90C,0xC90D,0xC90F,0xC911,0xC918,0xC92C,0xC934,0xC950,0xC951,0xC954,0xC958,0xC960,0xC961,0xC963,0xC96C,0xC970,0xC974,0xC97C,0xC988,0xC989,0xC98C,0xC990,0xC998,0xC999,0xC99B,0xC99D,0xC9C0,0xC9C1,0xC9C4,0xC9C7,0xC9C8,0xC9CA,0xC9D0,0xC9D1,0xC9D3,0xC9D5,0xC9D6,0xC9D9,0xC9DA,0xC9DC,0xC9DD,0xC9E0,0xC9E2,0xC9E4,0xC9E7,0xC9EC,0xC9ED,0xC9EF,0xC9F0,0xC9F1,0xC9F8,0xC9F9,0xC9FC,0xCA00,0xCA08,0xCA09,0xCA0B,0xCA0C,0xCA0D,0xCA14,0xCA18,0xCA29,0xCA4C,0xCA4D,0xCA50,0xCA54,0xCA5C,0xCA5D,0xCA5F,0xCA60,0xCA61,0xCA68,0xCA7D,0xCA84,0xCA98,0xCABC,0xCABD,0xCAC0,0xCAC4,0xCACC,0xCACD,0xCACF,0xCAD1,0xCAD3,0xCAD8,0xCAD9,0xCAE0,0xCAEC,0xCAF4,0xCB08,0xCB10,0xCB14,0xCB18,0xCB20,0xCB21,0xCB41,0xCB48,0xCB49,0xCB4C,0xCB50,0xCB58,0xCB59,0xCB5D,0xCB64,0xCB78,0xCB79,0xCB9C,0xCBB8,0xCBD4,0xCBE4,0xCBE7,0xCBE9,0xCC0C,0xCC0D,0xCC10,0xCC14,0xCC1C,0xCC1D,0xCC21,0xCC22,0xCC27,0xCC28,0xCC29,0xCC2C,0xCC2E,0xCC30,0xCC38,0xCC39,0xCC3B,0xCC3C,0xCC3D,0xCC3E,0xCC44,0xCC45,0xCC48,0xCC4C,0xCC54,0xCC55,0xCC57,0xCC58,0xCC59,0xCC60,0xCC64,0xCC66,0xCC68,0xCC70,0xCC75,0xCC98,0xCC99,0xCC9C,0xCCA0,0xCCA8,0xCCA9,0xCCAB,0xCCAC,0xCCAD,0xCCB4,0xCCB5,0xCCB8,0xCCBC,0xCCC4,0xCCC5,0xCCC7,0xCCC9,0xCCD0,0xCCD4,0xCCE4,0xCCEC,0xCCF0,0xCD01,0xCD08,0xCD09,0xCD0C,0xCD10,0xCD18,0xCD19,0xCD1B,0xCD1D,0xCD24,0xCD28,0xCD2C,0xCD39,0xCD5C,0xCD60,0xCD64,0xCD6C,0xCD6D,0xCD6F,0xCD71,0xCD78,0xCD88,0xCD94,0xCD95,0xCD98,0xCD9C,0xCDA4,0xCDA5,0xCDA7,0xCDA9,0xCDB0,0xCDC4,0xCDCC,0xCDD0,0xCDE8,0xCDEC,0xCDF0,0xCDF8,0xCDF9,0xCDFB,0xCDFD,0xCE04,0xCE08,0xCE0C,0xCE14,0xCE19,0xCE20,0xCE21,0xCE24,0xCE28,0xCE30,0xCE31,0xCE33,0xCE35,0xCE58,0xCE59,0xCE5C,0xCE5F,0xCE60,0xCE61,0xCE68,0xCE69,0xCE6B,0xCE6D,0xCE74,0xCE75,0xCE78,0xCE7C,0xCE84,0xCE85,0xCE87,0xCE89,0xCE90,0xCE91,0xCE94,0xCE98,0xCEA0,0xCEA1,0xCEA3,0xCEA4,0xCEA5,0xCEAC,0xCEAD,0xCEC1,0xCEE4,0xCEE5,0xCEE8,0xCEEB,0xCEEC,0xCEF4,0xCEF5,0xCEF7,0xCEF8,0xCEF9,0xCF00,0xCF01,0xCF04,0xCF08,0xCF10,0xCF11,0xCF13,0xCF15,0xCF1C,0xCF20,0xCF24,0xCF2C,0xCF2D,0xCF2F,0xCF30,0xCF31,0xCF38,0xCF54,0xCF55,0xCF58,0xCF5C,0xCF64,0xCF65,0xCF67,0xCF69,0xCF70,0xCF71,0xCF74,0xCF78,0xCF80,0xCF85,0xCF8C,0xCFA1,0xCFA8,0xCFB0,0xCFC4,0xCFE0,0xCFE1,0xCFE4,0xCFE8,0xCFF0,0xCFF1,0xCFF3,0xCFF5,0xCFFC,0xD000,0xD004,0xD011,0xD018,0xD02D,0xD034,0xD035,0xD038,0xD03C,0xD044,0xD045,0xD047,0xD049,0xD050,0xD054,0xD058,0xD060,0xD06C,0xD06D,0xD070,0xD074,0xD07C,0xD07D,0xD081,0xD0A4,0xD0A5,0xD0A8,0xD0AC,0xD0B4,0xD0B5,0xD0B7,0xD0B9,0xD0C0,0xD0C1,0xD0C4,0xD0C8,0xD0C9,0xD0D0,0xD0D1,0xD0D3,0xD0D4,0xD0D5,0xD0DC,0xD0DD,0xD0E0,0xD0E4,0xD0EC,0xD0ED,0xD0EF,0xD0F0,0xD0F1,0xD0F8,0xD10D,0xD130,0xD131,0xD134,0xD138,0xD13A,0xD140,0xD141,0xD143,0xD144,0xD145,0xD14C,0xD14D,0xD150,0xD154,0xD15C,0xD15D,0xD15F,0xD161,0xD168,0xD16C,0xD17C,0xD184,0xD188,0xD1A0,0xD1A1,0xD1A4,0xD1A8,0xD1B0,0xD1B1,0xD1B3,0xD1B5,0xD1BA,0xD1BC,0xD1C0,0xD1D8,0xD1F4,0xD1F8,0xD207,0xD209,0xD210,0xD22C,0xD22D,0xD230,0xD234,0xD23C,0xD23D,0xD23F,0xD241,0xD248,0xD25C,0xD264,0xD280,0xD281,0xD284,0xD288,0xD290,0xD291,0xD295,0xD29C,0xD2A0,0xD2A4,0xD2AC,0xD2B1,0xD2B8,0xD2B9,0xD2BC,0xD2BF,0xD2C0,0xD2C2,0xD2C8,0xD2C9,0xD2CB,0xD2D4,0xD2D8,0xD2DC,0xD2E4,0xD2E5,0xD2F0,0xD2F1,0xD2F4,0xD2F8,0xD300,0xD301,0xD303,0xD305,0xD30C,0xD30D,0xD30E,0xD310,0xD314,0xD316,0xD31C,0xD31D,0xD31F,0xD320,0xD321,0xD325,0xD328,0xD329,0xD32C,0xD330,0xD338,0xD339,0xD33B,0xD33C,0xD33D,0xD344,0xD345,0xD37C,0xD37D,0xD380,0xD384,0xD38C,0xD38D,0xD38F,0xD390,0xD391,0xD398,0xD399,0xD39C,0xD3A0,0xD3A8,0xD3A9,0xD3AB,0xD3AD,0xD3B4,0xD3B8,0xD3BC,0xD3C4,0xD3C5,0xD3C8,0xD3C9,0xD3D0,0xD3D8,0xD3E1,0xD3E3,0xD3EC,0xD3ED,0xD3F0,0xD3F4,0xD3FC,0xD3FD,0xD3FF,0xD401,0xD408,0xD41D,0xD440,0xD444,0xD45C,0xD460,0xD464,0xD46D,0xD46F,0xD478,0xD479,0xD47C,0xD47F,0xD480,0xD482,0xD488,0xD489,0xD48B,0xD48D,0xD494,0xD4A9,0xD4CC,0xD4D0,0xD4D4,0xD4DC,0xD4DF,0xD4E8,0xD4EC,0xD4F0,0xD4F8,0xD4FB,0xD4FD,0xD504,0xD508,0xD50C,0xD514,0xD515,0xD517,0xD53C,0xD53D,0xD540,0xD544,0xD54C,0xD54D,0xD54F,0xD551,0xD558,0xD559,0xD55C,0xD560,0xD565,0xD568,0xD569,0xD56B,0xD56D,0xD574,0xD575,0xD578,0xD57C,0xD584,0xD585,0xD587,0xD588,0xD589,0xD590,0xD5A5,0xD5C8,0xD5C9,0xD5CC,0xD5D0,0xD5D2,0xD5D8,0xD5D9,0xD5DB,0xD5DD,0xD5E4,0xD5E5,0xD5E8,0xD5EC,0xD5F4,0xD5F5,0xD5F7,0xD5F9,0xD600,0xD601,0xD604,0xD608,0xD610,0xD611,0xD613,0xD614,0xD615,0xD61C,0xD620,0xD624,0xD62D,0xD638,0xD639,0xD63C,0xD640,0xD645,0xD648,0xD649,0xD64B,0xD64D,0xD651,0xD654,0xD655,0xD658,0xD65C,0xD667,0xD669,0xD670,0xD671,0xD674,0xD683,0xD685,0xD68C,0xD68D,0xD690,0xD694,0xD69D,0xD69F,0xD6A1,0xD6A8,0xD6AC,0xD6B0,0xD6B9,0xD6BB,0xD6C4,0xD6C5,0xD6C8,0xD6CC,0xD6D1,0xD6D4,0xD6D7,0xD6D9,0xD6E0,0xD6E4,0xD6E8,0xD6F0,0xD6F5,0xD6FC,0xD6FD,0xD700,0xD704,0xD711,0xD718,0xD719,0xD71C,0xD720,0xD728,0xD729,0xD72B,0xD72D,0xD734,0xD735,0xD738,0xD73C,0xD744,0xD747,0xD749,0xD750,0xD751,0xD754,0xD756,0xD757,0xD758,0xD759,0xD760,0xD761,0xD763,0xD765,0xD769,0xD76C,0xD770,0xD774,0xD77C,0xD77D,0xD781,0xD788,0xD789,0xD78C,0xD790,0xD798,0xD799,0xD79B,0xD79D,0x1100,0x1101,0x1102,0x1103,0x1104,0x1105,0x1106,0x1107,0x1108,0x1109,0x110A,0x110B,0x110C,0x110D,0x110E,0x110F,0x1110,0x1111,0x1112,0x1161,0x1162,0x1163,0x1164,0x1165,0x1166,0x1167,0x1168,0x1169,0x116D,0x116E,0x1172,0x1173,0x1175,0xB894,0xC330,0xC3BC,0xC4D4,0xCB2C,0x000A,0x000D,0x000C};
        public static List<byte> pp = new List<byte> { 0, 35, 25, 10, 15, 20, 20, 15, 15, 15, 35, 30, 5, 10, 20, 30, 35, 35, 20, 15, 20, 20, 25, 20, 30, 5, 10, 15, 15, 15, 25, 20, 5, 35, 15, 20, 20, 10, 15, 30, 35, 20, 20, 30, 25, 40, 20, 15, 20, 20, 20, 30, 25, 15, 30, 25, 5, 15, 10, 5, 20, 20, 20, 5, 35, 20, 25, 20, 20, 20, 15, 25, 15, 10, 40, 25, 10, 35, 30, 15, 10, 40, 10, 15, 30, 15, 20, 10, 15, 10, 5, 10, 10, 25, 10, 20, 40, 30, 30, 20, 20, 15, 10, 40, 15, 10, 30, 10, 20, 10, 40, 40, 20, 30, 30, 20, 30, 10, 10, 20, 5, 10, 30, 20, 20, 20, 5, 15, 15, 20, 10, 15, 35, 20, 15, 10, 10, 30, 15, 40, 20, 15, 10, 5, 10, 30, 10, 15, 20, 15, 40, 20, 10, 5, 15, 10, 10, 10, 15, 30, 30, 10, 10, 20, 10, 0, 1, 10, 10, 10, 5, 15, 25, 15, 10, 15, 30, 5, 40, 15, 10, 25, 10, 30, 10, 20, 10, 10, 10, 10, 10, 20, 5, 40, 5, 5, 15, 5, 10, 5, 10, 10, 10, 10, 20, 20, 40, 15, 10, 20, 20, 25, 5, 15, 10, 5, 20, 15, 20, 25, 20, 5, 30, 5, 10, 20, 40, 5, 20, 40, 20, 15, 35, 10, 5, 5, 5, 15, 5, 20, 5, 5, 15, 20, 10, 5, 5, 15, 10, 15, 15, 10, 10, 10, 20, 10, 10, 10, 10, 15, 15, 15, 10, 20, 20, 10, 20, 20, 20, 20, 20, 10, 10, 10, 20, 20, 5, 15, 10, 10, 15, 10, 20, 5, 5, 10, 10, 20, 5, 10, 20, 10, 20, 20, 20, 5, 5, 15, 20, 10, 15, 20, 15, 10, 10, 15, 10, 5, 5, 10, 15, 10, 5, 20, 25, 5, 40, 15, 5, 40, 15, 20, 20, 5, 15, 20, 20, 15, 15, 5, 10, 30, 20, 30, 15, 5, 40, 15, 5, 20, 5, 15, 25, 40, 15, 20, 15, 20, 15, 20, 10, 20, 20, 5, 5, 10, 5, 40, 10, 10, 5, 10, 10, 15, 10, 20, 30, 30, 10, 20, 5, 10, 10, 15, 10, 10, 5, 15, 5, 10, 10, 30, 20, 20, 10, 10, 5, 5, 10, 5, 20, 10, 20, 10, 15, 10, 20, 20, 20, 15, 15, 10, 15, 20, 15, 10, 10, 10, 20, 10, 30, 5, 10, 15, 10, 10, 5, 20, 30, 10, 30, 15, 15, 15, 15, 30, 10, 20, 15, 10, 10, 20, 15, 5, 5, 15, 15, 5, 10, 5, 20, 5, 15, 20, 5, 20, 20, 20, 20, 10, 20, 10, 15, 20, 15, 10, 10, 5, 10, 5, 5, 10, 5, 5, 10, 5, 5, 5, 15, 10, 10, 10, 10, 10, 10, 15, 20, 15, 10, 15, 10, 15, 10, 20, 10, 15, 10, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 20, 15, 10, 15, 15, 15, 15, 10, 10, 10, 10, 10, 15, 15, 15, 15, 5, 5, 15, 5, 10, 10, 10, 20, 20, 20, 10, 10, 30, 15, 15, 10, 15, 25, 10, 20, 10, 10, 10, 20, 10, 10, 10, 10, 10, 15, 15, 5, 5, 10, 10, 10, 5, 5, 10, 5, 5, 15, 10, 5, 5, 5, 10, 15, 10, 10, 20, 25, 10, 20, 30, 25, 20, 20, 15, 15, 15, 20, 10, 20, 10, 25, 10, 10, 20, 10, 30, 15, 10, 10, 10, 20, 20, 5, 5, 5, 20, 10, 20, 20, 15, 20, 20, 10, 20, 30, 10, 10, 40, 40, 30, 20, 40, 35, 30, 10, 10, 10, 10, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        public static ushort getGen4Char(ushort value)
        {
            int index = PkmLib.unicodeChar.IndexOf(value);
            return ingameChar[index];
        }

        public static ushort getGen5Char(ushort value)
        {
            int index = PkmLib.ingameChar.IndexOf(value);
            return unicodeChar[index];
        }

        //Language dependant lists
        public static List<string> lspecies = new List<string>();
        public static List<string> labilities = new List<string>();
        public static List<string> lnatures = new List<string>();
        public static List<string> litems = new List<string>();
        public static List<string> llocations = new List<string>();
        public static List<string> lmoves = new List<string>();
        public static List<string> lversions = new List<string>();
        public static List<string> llanguages = new List<string>();

        public static byte lang = 0; //Current language value, 0=English, 1=Spanish, 2=Spanish/English, 3=French, 4=German, 6= Korean
        public static bool dictionariesInitialized = false;

        //Data
        public static Dictionary<int, byte[]> baseStats = new Dictionary<int, byte[]>();
        public static Dictionary<string, byte> pokerus = new Dictionary<string, byte>();


        //Experience lists
        public static ushort[] slow = { 58, 59, 72, 73, 90, 91, 102, 103, 111, 112, 120, 121, 127, 128, 129, 130, 131, 142, 143, 144, 145, 146, 147, 148, 149, 150, 170, 171, 214, 220, 221, 226, 227, 228, 229, 234, 241, 243, 244, 245, 246, 247, 248, 249, 250, 280, 281, 282, 287, 288, 289, 304, 305, 306, 309, 310, 318, 319, 357, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 443, 444, 445, 446, 449, 450, 451, 452, 455, 458, 459, 460, 464, 473, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 582, 583, 584, 602, 603, 604, 610, 611, 612, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 692, 693, 703, 704, 705, 706, 716, 717, 718, 719, 720, 721 };
        public static ushort[] mediumSlow = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 18, 29, 30, 31, 32, 33, 34, 43, 44, 45, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 92, 93, 94, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 179, 180, 181, 182, 186, 187, 188, 189, 191, 192, 198, 207, 213, 215, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, 274, 275, 276, 277, 293, 294, 295, 302, 315, 328, 329, 330, 331, 332, 352, 359, 363, 364, 365, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 415, 416, 430, 441, 447, 448, 461, 472, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 519, 520, 521, 524, 525, 526, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 551, 552, 553, 554, 555, 570, 571, 574, 575, 576, 577, 578, 579, 599, 600, 601, 607, 608, 609, 619, 620, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 667, 668 };
        public static ushort[] mediumFast = { 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 37, 38, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 161, 162, 163, 164, 169, 172, 177, 178, 185, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 208, 211, 212, 216, 217, 218, 219, 223, 224, 230, 231, 232, 233, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 278, 279, 283, 284, 299, 307, 308, 311, 312, 322, 323, 324, 339, 340, 343, 344, 351, 360, 361, 362, 399, 400, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 427, 428, 434, 435, 436, 437, 438, 439, 442, 453, 454, 462, 463, 465, 466, 467, 469, 470, 471, 474, 476, 478, 479, 504, 505, 509, 510, 511, 512, 513, 514, 515, 516, 522, 523, 527, 528, 529, 530, 538, 539, 546, 547, 548, 549, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 605, 606, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 631, 632, 659, 660, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 708, 709, 710, 711, 712, 713, 714, 715 };
        public static ushort[] fast = { 35, 36, 39, 40, 113, 165, 166, 167, 168, 173, 174, 175, 176, 183, 184, 190, 200, 209, 210, 222, 225, 235, 242, 298, 300, 301, 303, 325, 326, 327, 337, 338, 353, 354, 355, 356, 358, 370, 424, 429, 431, 432, 433, 440, 468, 477, 517, 518, 531, 572, 573, 594, 707 };
        public static ushort[] fluctuating = { 285, 286, 296, 297, 314, 316, 317, 320, 321, 336, 341, 342, 425, 426 };
        public static ushort[] erratic = { 290, 291, 292, 313, 333, 334, 335, 345, 346, 347, 348, 349, 350, 366, 367, 368, 408, 409, 410, 411, 456, 457 };
        public static uint[] slowlist = { 0, 10, 33, 80, 156, 270, 428, 640, 911, 1250, 1663, 2160, 2746, 3430, 4218, 5120, 6141, 7290, 8573, 10000, 11576, 13310, 15208, 17280, 19531, 21970, 24603, 27440, 30486, 33750, 37238, 40960, 44921, 49130, 53593, 58320, 63316, 68590, 74148, 80000, 86151, 92610, 99383, 106480, 113906, 121670, 129778, 138240, 147061, 156250, 165813, 175760, 186096, 196830, 207968, 219520, 231491, 243890, 256723, 270000, 283726, 297910, 312558, 327680, 343281, 359370, 375953, 393040, 410636, 428750, 447388, 466560, 486271, 506530, 527343, 548720, 570666, 593190, 616298, 640000, 664301, 689210, 714733, 740880, 767656, 795070, 823128, 851840, 881211, 911250, 941963, 973360, 1005446, 1038230, 1071718, 1105920, 1140841, 1176490, 1212873, 1250000 };
        public static uint[] mediumSlowList = { 0, 9, 57, 96, 135, 179, 236, 314, 419, 560, 742, 973, 1261, 1612, 2035, 2535, 3120, 3798, 4575, 5460, 6458, 7577, 8825, 10208, 11735, 13411, 15244, 17242, 19411, 21760, 24294, 27021, 29949, 33084, 36435, 40007, 43808, 47846, 52127, 56660, 61450, 66505, 71833, 77440, 83335, 89523, 96012, 102810, 109923, 117360, 125126, 133229, 141677, 150476, 159635, 169159, 179056, 189334, 199999, 211060, 222522, 234393, 246681, 259392, 272535, 286115, 300140, 314618, 329555, 344960, 360838, 377197, 394045, 411388, 429235, 447591, 466464, 485862, 505791, 526260, 547274, 568841, 590969, 613664, 636935, 660787, 685228, 710266, 735907, 762160, 789030, 816525, 844653, 873420, 902835, 932903, 963632, 995030, 1027103, 1059860 };
        public static uint[] mediumFastList = { 0, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261, 10648, 12167, 13824, 15625, 17576, 19683, 21952, 24389, 27000, 29791, 32768, 35937, 39304, 42875, 46656, 50653, 54872, 59319, 64000, 68921, 74088, 79507, 85184, 91125, 97336, 103823, 110592, 117649, 125000, 132651, 140608, 148877, 157464, 166375, 175616, 185193, 195112, 205379, 216000, 226981, 238328, 250047, 262144, 274625, 287496, 300763, 314432, 328509, 343000, 357911, 373248, 389017, 405224, 421875, 438976, 456533, 474552, 493039, 512000, 531441, 551368, 571787, 592704, 614125, 636056, 658503, 681472, 704969, 729000, 753571, 778688, 804357, 830584, 857375, 884736, 912673, 941192, 970299, 1000000 };
        public static uint[] fastlist = { 0, 6, 21, 51, 100, 172, 274, 409, 583, 800, 1064, 1382, 1757, 2195, 2700, 3276, 3930, 4665, 5487, 6400, 7408, 8518, 9733, 11059, 12500, 14060, 15746, 17561, 19511, 21600, 23832, 26214, 28749, 31443, 34300, 37324, 40522, 43897, 47455, 51200, 55136, 59270, 63605, 68147, 72900, 77868, 83058, 88473, 94119, 100000, 106120, 112486, 119101, 125971, 133100, 140492, 148154, 156089, 164303, 172800, 181584, 190662, 200037, 209715, 219700, 229996, 240610, 251545, 262807, 274400, 286328, 298598, 311213, 324179, 337500, 351180, 365226, 379641, 394431, 409600, 425152, 441094, 457429, 474163, 491300, 508844, 526802, 545177, 563975, 583200, 602856, 622950, 643485, 664467, 685900, 707788, 730138, 752953, 776239, 800000 };
        public static uint[] fluctuatinglist = { 0, 4, 13, 32, 65, 112, 178, 276, 393, 540, 745, 967, 1230, 1591, 1957, 2457, 3046, 3732, 4526, 5440, 6482, 7666, 9003, 10506, 12187, 14060, 16140, 18439, 20974, 23760, 26811, 30146, 33780, 37731, 42017, 46656, 50653, 55969, 60505, 66560, 71677, 78533, 84277, 91998, 98415, 107069, 114205, 123863, 131766, 142500, 151222, 163105, 172697, 185807, 196322, 210739, 222231, 238036, 250562, 267840, 281456, 300293, 315059, 335544, 351520, 373744, 390991, 415050, 433631, 459620, 479600, 507617, 529063, 559209, 582187, 614566, 639146, 673863, 700115, 737280, 765275, 804997, 834809, 877201, 908905, 954084, 987754, 1035837, 1071552, 1122660, 1160499, 1214753, 1254796, 1312322, 1354652, 1415577, 1460276, 1524731, 1571884, 1640000 };
        public static uint[] erraticlist = { 0, 15, 52, 122, 237, 406, 637, 942, 1326, 1800, 2369, 3041, 3822, 4719, 5737, 6881, 8155, 9564, 11111, 12800, 14632, 16610, 18737, 21012, 23437, 26012, 28737, 31610, 34632, 37800, 41111, 44564, 48155, 51881, 55737, 59719, 63822, 68041, 72369, 76800, 81326, 85942, 90637, 95406, 100237, 105122, 110052, 115015, 120001, 125000, 131324, 137795, 144410, 151165, 158056, 165079, 172229, 179503, 186894, 194400, 202013, 209728, 217540, 225443, 233431, 241496, 249633, 257834, 267406, 276458, 286328, 296358, 305767, 316074, 326531, 336255, 346965, 357812, 367807, 378880, 390077, 400293, 411686, 423190, 433572, 445239, 457001, 467489, 479378, 491346, 501878, 513934, 526049, 536557, 548720, 560922, 571333, 583539, 591882, 600000 };
        //0 = Slow, 1 = Medium Slow, 2 = Medium Fast, 3 = Fast, 4 = Fluctuating, 5 = Erratic
        public static byte[] expList = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 3, 2, 2, 3, 3, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 0, 0, 2, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 3, 3, 2, 1, 1, 1, 1, 3, 1, 1, 2, 2, 2, 2, 2, 1, 2, 3, 2, 2, 2, 2, 2, 2, 1, 2, 3, 3, 2, 2, 1, 0, 1, 2, 2, 2, 2, 0, 0, 3, 2, 2, 3, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 2, 2, 2, 2, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 2, 2, 4, 4, 0, 0, 0, 5, 5, 5, 1, 1, 1, 4, 4, 3, 2, 3, 3, 1, 3, 0, 0, 0, 2, 2, 0, 0, 2, 2, 5, 4, 1, 4, 4, 0, 0, 4, 4, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 5, 5, 5, 4, 3, 3, 2, 2, 4, 4, 2, 2, 5, 5, 5, 5, 5, 5, 2, 1, 3, 3, 3, 3, 0, 3, 1, 2, 2, 2, 1, 1, 1, 5, 5, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 1, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 5, 5, 0, 0, 0, 1, 2, 2, 0, 2, 2, 2, 3, 2, 2, 2, 1, 0, 2, 0, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 3, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 };

        /// <summary>
        /// Get pokemon sprite
        /// </summary>
        /// <param name="pkmNo">Species Pokedex number</param>
        /// <param name="form">Pokemon form</param>
        /// <returns>Given Pokemon sprite as Image</returns>
        public static System.Drawing.Image getSprite(ushort pkmNo, string form = "None")
        {
            if (form == "None")
            {
                return Properties.Resources.ResourceManager.GetObject("_" + pkmNo) as System.Drawing.Image;
            }
            else
            {
                if (form == "Fan")
                {
                    return Properties.Resources.ResourceManager.GetObject("_" + pkmNo + "_s") as System.Drawing.Image;
                }
                else
                {
                    if (Properties.Resources.ResourceManager.GetObject("_" + pkmNo + "_" + form.First().ToString().ToLowerInvariant()) != null)
                    {
                        return Properties.Resources.ResourceManager.GetObject("_" + pkmNo + "_" + form.First().ToString().ToLowerInvariant()) as System.Drawing.Image;
                    }
                    else
                    {
                        return Properties.Resources.ResourceManager.GetObject("_" + pkmNo) as System.Drawing.Image;
                    }
                }
            }
        }

        public static void clearLists()
        {
            lspecies.Clear();
            lmoves.Clear();
            labilities.Clear();
            lnatures.Clear();
            litems.Clear();
            llocations.Clear();
            lversions.Clear();
            llanguages.Clear();
        }

        private static void initializeLists()
        {
            species.Clear();
            moves.Clear();
            abilities.Clear();
            natures.Clear();
            items.Clear();
            locations.Clear();
            string[] temp = Properties.Resources.enSpecies.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                species.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enMoves.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                moves.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enAbilities.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                abilities.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enNatures.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                natures.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enItems.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                items.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enLocations.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                locations.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enLanguages.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                languages.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enVersions.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                versions.Add(temp[i].TrimEnd('\r'));
            }
            english();
        }

        public static void changeLanguage(byte l = 0)
        {
            lang = l;
            //Clear lists
            clearLists();
            switch (lang)
            {
                case 0:
                    english();
                    break;
                case 1:
                    break;
                case 2:
                    break;
                case 3:
                    french();
                    break;
                case 4:
                    german();
                    break;
                case 6:
                    korean();
                    break;
                default:
                    break;
            }
        }

        private static void english()
        {
            string[] temp = Properties.Resources.enSpecies.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lspecies.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enMoves.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lmoves.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enAbilities.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                labilities.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enNatures.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lnatures.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enItems.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                litems.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enLocations.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                llocations.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enLanguages.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                llanguages.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enVersions.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lversions.Add(temp[i].TrimEnd('\r'));
            }
        }

        private static void french()
        {
            string[] temp = Properties.Resources.frSpecies.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lspecies.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.frMoves.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lmoves.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.frAbilities.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                labilities.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.frNatures.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lnatures.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.frItems.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                litems.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.frLocations.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                llocations.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.frLanguages.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                llanguages.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.frVersions.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lversions.Add(temp[i].TrimEnd('\r'));
            }
        }

        private static void korean()
        {
            string[] temp = Properties.Resources.krSpecies.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lspecies.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.krMoves.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lmoves.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.krAbilities.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                labilities.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.krNatures.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lnatures.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.krItems.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                litems.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.krLocations.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                llocations.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enLanguages.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                llanguages.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.enVersions.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lversions.Add(temp[i].TrimEnd('\r'));
            }
        }

        private static void german()
        {
            string[] temp = Properties.Resources.grSpecies.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lspecies.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.grMoves.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lmoves.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.grAbilities.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                labilities.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.grNatures.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lnatures.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.grItems.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                litems.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.grLocations.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                llocations.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.grLanguages.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                llanguages.Add(temp[i].TrimEnd('\r'));
            }
            temp = Properties.Resources.grVersions.Split(',');
            for (int i = 0; i < temp.Length; i++)
            {
                lversions.Add(temp[i].TrimEnd('\r'));
            }
        }

        public static string speciesTranslate(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = lspecies.IndexOf(s);
                return species[i];
            }
        }

        public static string abilityTranslate(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = labilities.IndexOf(s);
                return abilities[i];
            }
        }

        public static string itemTranslate(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = litems.IndexOf(s);
                return items[i];
            }
        }

        public static string locationTranslate(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = llocations.IndexOf(s);
                return locations[i];
            }
        }

        public static string natureTranslate(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = lnatures.IndexOf(s);
                return natures[i];
            }
        }

        public static string moveTranslate(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = lmoves.IndexOf(s);
                return moves[i];
            }
        }

        public static string languageTranslate(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = llanguages.IndexOf(s);
                return languages[i];
            }
        }

        public static string versionTranslate(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = lversions.IndexOf(s);
                return versions[i];
            }
        }

        public static string speciesTranslateTo(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = species.IndexOf(s);
                return lspecies[i];
            }
        }

        public static string abilityTranslateTo(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = abilities.IndexOf(s);
                return labilities[i];
            }
        }

        public static string itemTranslateTo(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = items.IndexOf(s);
                return litems[i];
            }
        }

        public static string locationTranslateTo(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = locations.IndexOf(s);
                return llocations[i];
            }
        }

        public static string natureTranslateTo(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = natures.IndexOf(s);
                return lnatures[i];
            }
        }

        public static string moveTranslateTo(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = moves.IndexOf(s);
                return lmoves[i];
            }
        }

        public static string versionTranslateTo(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = versions.IndexOf(s);
                return lversions[i];
            }
        }

        public static string languageTranslateTo(string s)
        {
            if (lang == 0)
            {
                return s;
            }
            else
            {
                int i = languages.IndexOf(s);
                return llanguages[i];
            }
        }

        public static string[] getFormList(string species)
        {
            string[] forms = new string[] { "None" };
            if (species == "Unown")
            {
                forms = new string[]{
				"A",
				"B",
				"C",
				"D",
				"E",
				"F",
				"G",
				"H",
				"I",
				"J",
				"K",
				"L",
				"M",
				"N",
				"O",
				"P",
				"Q",
				"R",
				"S",
				"T",
				"U",
				"V",
				"W",
				"X",
				"Y",
				"Z",
				"?",
				"!"
			};
            }
            if (species == "Deoxys")
            {
                forms = new string[]{
				"Normal",
				"Attack",
				"Defense",
				"Speed"
			};
            }
            if (species == "Burmy")
            {
                forms = new string[]{
				"Plant",
				"Sandy",
				"Thrash"
			};
            }
            if (species == "Wormadam")
            {
                forms = new string[]{
				"Plant",
				"Sandy",
				"Thrash"
			};
            }
            if (species == "Shellos")
            {
                forms = new string[]{
				"West",
				"East"
			};
            }
            if (species == "Gastrodon")
            {
                forms = new string[]{
				"West",
				"East"
			};
            }
            if (species == "Rotom")
            {
                forms = new string[]{
				"Normal",
				"Heat",
				"Wash",
				"Frost",
				"Fan",
				"Mow"
			};
            }
            if (species == "Giratina")
            {
                forms = new string[]{
				"Altered",
				"Origin"
			};
            }
            if (species == "Shaymin")
            {
                forms = new string[]{
				"Land",
				"Sky"
			};
            }
            if (species == "Arceus")
            {
                forms = new string[]{
				"Normal",
				"Fighting",
				"Flying",
				"Poison",
				"Ground",
				"Rock",
				"Bug",
				"Ghost",
				"Steel",
				"Fire",
				"Water",
				"Grass",
				"Electric",
				"Psychic",
				"Ice",
				"Dragon",
				"Dark"
			};
            }
            if (species == "Basculin")
            {
                forms = new string[]{
				"Red Striped",
				"Blue Striped"
			};
            }
            if (species == "Deerling")
            {
                forms = new string[]{
				"Spring",
				"Summer",
				"Autumn",
				"Winter"
			};
            }
            if (species == "Sawsbuck")
            {
                forms = new string[]{
				"Spring",
				"Summer",
				"Autumn",
				"Winter"
			};
            }
            if (species == "Tornadus")
            {
                forms = new string[] {
				"Incarnate",
				"Therian"
			};
            }
            if (species == "Thundurus")
            {
                forms = new string[]{
				"Incarnate",
				"Therian"
			};
            }
            if (species == "Landorus")
            {
                forms = new string[]{
				"Incarnate",
				"Therian"
			};
            }
            if (species == "Kyurem")
            {
                forms = new string[]{
				"Normal",
				"White",
				"Black"
			};
            }
            if (species == "Keldeo")
            {
                forms = new string[]{
				"Ordinary",
				"Resolute"
			};
            }
            if (species == "Meloetta")
            {
                forms = new string[]{
				"Aria",
				"Pirouette"
			};
            }
            if (species == "Genesect")
            {
                forms = new string[]{
				"Normal",
				"Douse",
				"Shock",
				"Burn",
				"Chill"
			};
            }
            if (species == "Vivillon" | species == "Scatterbug" | species == "Spewpa")
            {
                forms = new string[]{
                "Icy-snow",
                "Polar",
                "Tundra",
                "Continental",
                "Garden",
                "Elegant",
                "Meadow",
                "Modern",
                "Marine",
                "Archipelago",
                "High-plains",
                "Sandstorm",
                "River",
                "Monsoon",
                "Savanna",
                "Sun",
                "Ocean",
                "Jungle"
            };
            }
            if (species == "Flabébé" | species == "Floette" | species == "Florges")
            {
                forms = new string[]{
                "Red",
                "Yellow",
                "Orange",
                "Blue",
                "White"
            };
            }
            if (species == "Furfrou")
            {
                forms = new string[]{
                "Natural",
                "Heart",
                "Star",
                "Diamond",
                "Deputante",
                "Matron",
                "Dandy",
                "La-reine",
                "Kabuki",
                "Pharoah"
            };
            }
            if (species == "Meowstic")
            {
                forms = new string[]{
                "Male",
                "Female"
            };
            }
            if (species == "Aegislash")
            {
                forms = new string[]{
                "Shield",
                "Blade"
            };
            }
            if (species == "Pumpkaboo" | species == "Gourgeist")
            {
                forms = new string[]{
                "Average",
                "Small",
                "Large",
                "Super"
            };
            }
            if (species == "Venusaur" | species == "Blastoise" | species == "Alakazam" | species == "Gengar" | species == "Kangaskhan" | species == "Pinsir" | species == "Gyarados" | species == "Aerodactyl" | species == "Ampharos" | species == "Scizor" | species == "Heracross" | species == "Houndoom" | species == "Tyranitar" | species == "Blaziken" | species == "Gardevoir" | species == "Mawile" | species == "Aggron" | species == "Medicham" | species == "Manectric" | species == "Banette" | species == "Absol" | species == "Garchomp" | species == "Lucario" | species == "Abomasnow")
            {
                forms = new string[]{
                "Normal",
                "Mega"
            };
            }
            if (species == "Charizard" | species == "Mewtwo")
            {
                forms = new string[]{
                "Normal",
                "Mega X",
                "Mega Y"
            };
            }
            return forms;
        }

        public static string getFormFromValue(string species, byte value)
        {
            string[] forms = getFormList(species);
            if (forms.Length < value)
            {
                return "None";
            }
            return forms[value];
        }

        public static byte getFormValue(string species, string form)
        {
            string[] forms = getFormList(species);
            if (forms.Length == 1)
            {
                return 0;
            }
            for (byte i = 0; i < forms.Length; i++)
            {
                if (forms[i] == form)
                {
                    return i;
                }
            }
            return 0;
        }

        public static void Initialize()
        {
            if (dictionariesInitialized)
                return;

            initializeLists();

            //Pokerus
            pokerus.Add("None", 0);
            pokerus.Add("Infected (0)", 0x2);
            pokerus.Add("Cured (0)", 0x1);
            pokerus.Add("Infected (1)", 0x12);
            pokerus.Add("Cured (1)", 0x10);
            pokerus.Add("Infected (2)", 0x23);
            pokerus.Add("Cured (2)", 0x20);
            pokerus.Add("Infected (3)", 0x34);
            pokerus.Add("Cured (3)", 0x30);
            pokerus.Add("Infected (4)", 0x41);
            pokerus.Add("Cured (4)", 0x40);
            pokerus.Add("Infected (5)", 0x52);
            pokerus.Add("Cured (5)", 0x50);
            pokerus.Add("Infected (6)", 0x63);
            pokerus.Add("Cured (6)", 0x60);
            pokerus.Add("Infected (7)", 0x74);
            pokerus.Add("Cured (7)", 0x70);
            pokerus.Add("Infected (8)", 0x81);
            pokerus.Add("Cured (8)", 0x80);
            pokerus.Add("Infected (9)", 0x92);
            pokerus.Add("Cured (9)", 0x90);
            pokerus.Add("Infected (10)", 0xa3);
            pokerus.Add("Cured (10)", 0xa0);
            pokerus.Add("Infected (11)", 0xb4);
            pokerus.Add("Cured (11)", 0xb0);
            pokerus.Add("Infected (12)", 0xc1);
            pokerus.Add("Cured (12)", 0xc0);
            pokerus.Add("Infected (13)", 0xd2);
            pokerus.Add("Cured (13)", 0xd0);
            pokerus.Add("Infected (14)", 0xe3);
            pokerus.Add("Cured (14)", 0xe0);
            pokerus.Add("Infected (15)", 0xf4);
            pokerus.Add("Cured (15)", 0xf0);

            //Base Stats
            //HP/Atk/Def/SpA/SpD/Spd
            baseStats.Add(0, new byte[] {
			0,
			0,
			0,
			0,
			0,
			0
		});
            baseStats.Add(1, new byte[] {
			45,
			49,
			49,
			65,
			65,
			45
		});
            baseStats.Add(2, new byte[] {
			60,
			62,
			63,
			80,
			80,
			60
		});
            baseStats.Add(3, new byte[] {
			80,
			82,
			83,
			100,
			100,
			80
		});
            baseStats.Add(4, new byte[] {
			39,
			52,
			43,
			60,
			50,
			65
		});
            baseStats.Add(5, new byte[] {
			58,
			64,
			58,
			80,
			65,
			80
		});
            baseStats.Add(6, new byte[] {
			78,
			84,
			78,
			109,
			85,
			100
		});
            baseStats.Add(7, new byte[] {
			44,
			48,
			65,
			50,
			64,
			43
		});
            baseStats.Add(8, new byte[] {
			59,
			63,
			80,
			65,
			80,
			58
		});
            baseStats.Add(9, new byte[] {
			79,
			83,
			100,
			85,
			105,
			78
		});
            baseStats.Add(10, new byte[] {
			45,
			30,
			35,
			20,
			20,
			45
		});
            baseStats.Add(11, new byte[] {
			50,
			20,
			55,
			25,
			25,
			30
		});
            baseStats.Add(12, new byte[] {
			60,
			45,
			50,
			80,
			80,
			70
		});
            baseStats.Add(13, new byte[] {
			40,
			35,
			30,
			20,
			20,
			50
		});
            baseStats.Add(14, new byte[] {
			45,
			25,
			50,
			25,
			25,
			35
		});
            baseStats.Add(15, new byte[] {
			65,
			80,
			40,
			45,
			80,
			75
		});
            baseStats.Add(16, new byte[] {
			40,
			45,
			40,
			35,
			35,
			56
		});
            baseStats.Add(17, new byte[] {
			63,
			60,
			55,
			50,
			50,
			71
		});
            baseStats.Add(18, new byte[] {
			83,
			80,
			75,
			70,
			70,
			91
		});
            baseStats.Add(19, new byte[] {
			30,
			56,
			35,
			25,
			35,
			72
		});
            baseStats.Add(20, new byte[] {
			55,
			81,
			60,
			50,
			70,
			97
		});
            baseStats.Add(21, new byte[] {
			40,
			60,
			30,
			31,
			31,
			70
		});
            baseStats.Add(22, new byte[] {
			65,
			90,
			65,
			61,
			61,
			100
		});
            baseStats.Add(23, new byte[] {
			35,
			60,
			44,
			40,
			54,
			55
		});
            baseStats.Add(24, new byte[] {
			60,
			85,
			69,
			65,
			79,
			80
		});
            baseStats.Add(25, new byte[] {
			35,
			55,
			30,
			50,
			40,
			90
		});
            baseStats.Add(26, new byte[] {
			60,
			90,
			55,
			90,
			80,
			100
		});
            baseStats.Add(27, new byte[] {
			50,
			75,
			85,
			20,
			30,
			40
		});
            baseStats.Add(28, new byte[] {
			75,
			100,
			110,
			45,
			55,
			65
		});
            baseStats.Add(29, new byte[] {
			55,
			47,
			52,
			40,
			40,
			41
		});
            baseStats.Add(30, new byte[] {
			70,
			62,
			67,
			55,
			55,
			56
		});
            baseStats.Add(31, new byte[] {
			90,
			82,
			87,
			75,
			85,
			76
		});
            baseStats.Add(32, new byte[] {
			46,
			57,
			40,
			40,
			40,
			50
		});
            baseStats.Add(33, new byte[] {
			61,
			72,
			57,
			55,
			55,
			65
		});
            baseStats.Add(34, new byte[] {
			81,
			92,
			77,
			85,
			75,
			85
		});
            baseStats.Add(35, new byte[] {
			70,
			45,
			48,
			60,
			65,
			35
		});
            baseStats.Add(36, new byte[] {
			95,
			70,
			73,
			85,
			90,
			60
		});
            baseStats.Add(37, new byte[] {
			38,
			41,
			40,
			50,
			65,
			65
		});
            baseStats.Add(38, new byte[] {
			73,
			76,
			75,
			81,
			100,
			100
		});
            baseStats.Add(39, new byte[] {
			115,
			45,
			20,
			45,
			25,
			20
		});
            baseStats.Add(40, new byte[] {
			140,
			70,
			45,
			75,
			50,
			45
		});
            baseStats.Add(41, new byte[] {
			40,
			45,
			35,
			30,
			40,
			55
		});
            baseStats.Add(42, new byte[] {
			75,
			80,
			70,
			65,
			75,
			90
		});
            baseStats.Add(43, new byte[] {
			45,
			50,
			55,
			75,
			65,
			30
		});
            baseStats.Add(44, new byte[] {
			60,
			65,
			70,
			85,
			75,
			40
		});
            baseStats.Add(45, new byte[] {
			75,
			80,
			85,
			100,
			90,
			50
		});
            baseStats.Add(46, new byte[] {
			35,
			70,
			55,
			45,
			55,
			25
		});
            baseStats.Add(47, new byte[] {
			60,
			95,
			80,
			60,
			80,
			30
		});
            baseStats.Add(48, new byte[] {
			60,
			55,
			50,
			40,
			55,
			45
		});
            baseStats.Add(49, new byte[] {
			70,
			65,
			60,
			90,
			75,
			90
		});
            baseStats.Add(50, new byte[] {
			10,
			55,
			25,
			35,
			45,
			95
		});
            baseStats.Add(51, new byte[] {
			35,
			80,
			50,
			50,
			70,
			120
		});
            baseStats.Add(52, new byte[] {
			40,
			45,
			35,
			40,
			40,
			90
		});
            baseStats.Add(53, new byte[] {
			65,
			70,
			60,
			65,
			65,
			115
		});
            baseStats.Add(54, new byte[] {
			50,
			52,
			48,
			65,
			50,
			55
		});
            baseStats.Add(55, new byte[] {
			80,
			82,
			78,
			95,
			80,
			85
		});
            baseStats.Add(56, new byte[] {
			40,
			80,
			35,
			35,
			45,
			70
		});
            baseStats.Add(57, new byte[] {
			65,
			105,
			60,
			60,
			70,
			95
		});
            baseStats.Add(58, new byte[] {
			55,
			70,
			45,
			70,
			50,
			60
		});
            baseStats.Add(59, new byte[] {
			90,
			110,
			80,
			100,
			80,
			95
		});
            baseStats.Add(60, new byte[] {
			40,
			50,
			40,
			40,
			40,
			90
		});
            baseStats.Add(61, new byte[] {
			65,
			65,
			65,
			50,
			50,
			90
		});
            baseStats.Add(62, new byte[] {
			90,
			85,
			95,
			70,
			90,
			70
		});
            baseStats.Add(63, new byte[] {
			25,
			20,
			15,
			105,
			55,
			90
		});
            baseStats.Add(64, new byte[] {
			40,
			35,
			30,
			120,
			70,
			105
		});
            baseStats.Add(65, new byte[] {
			55,
			50,
			45,
			135,
			85,
			120
		});
            baseStats.Add(66, new byte[] {
			70,
			80,
			50,
			35,
			35,
			35
		});
            baseStats.Add(67, new byte[] {
			80,
			100,
			70,
			50,
			60,
			45
		});
            baseStats.Add(68, new byte[] {
			90,
			130,
			80,
			65,
			85,
			55
		});
            baseStats.Add(69, new byte[] {
			50,
			75,
			35,
			70,
			30,
			40
		});
            baseStats.Add(70, new byte[] {
			65,
			90,
			50,
			85,
			45,
			55
		});
            baseStats.Add(71, new byte[] {
			80,
			105,
			65,
			100,
			60,
			70
		});
            baseStats.Add(72, new byte[] {
			40,
			40,
			35,
			50,
			100,
			70
		});
            baseStats.Add(73, new byte[] {
			80,
			70,
			65,
			80,
			120,
			100
		});
            baseStats.Add(74, new byte[] {
			40,
			80,
			100,
			30,
			30,
			20
		});
            baseStats.Add(75, new byte[] {
			55,
			95,
			115,
			45,
			45,
			35
		});
            baseStats.Add(76, new byte[] {
			80,
			110,
			130,
			55,
			65,
			45
		});
            baseStats.Add(77, new byte[] {
			50,
			85,
			55,
			65,
			65,
			90
		});
            baseStats.Add(78, new byte[] {
			65,
			100,
			70,
			80,
			80,
			105
		});
            baseStats.Add(79, new byte[] {
			90,
			65,
			65,
			40,
			40,
			15
		});
            baseStats.Add(80, new byte[] {
			95,
			75,
			110,
			100,
			80,
			30
		});
            baseStats.Add(81, new byte[] {
			25,
			35,
			70,
			95,
			55,
			45
		});
            baseStats.Add(82, new byte[] {
			50,
			60,
			95,
			120,
			70,
			70
		});
            baseStats.Add(83, new byte[] {
			52,
			65,
			55,
			58,
			62,
			60
		});
            baseStats.Add(84, new byte[] {
			35,
			85,
			45,
			35,
			35,
			75
		});
            baseStats.Add(85, new byte[] {
			60,
			110,
			70,
			60,
			60,
			100
		});
            baseStats.Add(86, new byte[] {
			65,
			45,
			55,
			45,
			70,
			45
		});
            baseStats.Add(87, new byte[] {
			90,
			70,
			80,
			70,
			95,
			70
		});
            baseStats.Add(88, new byte[] {
			80,
			80,
			50,
			40,
			50,
			25
		});
            baseStats.Add(89, new byte[] {
			105,
			105,
			75,
			65,
			100,
			50
		});
            baseStats.Add(90, new byte[] {
			30,
			65,
			100,
			45,
			25,
			40
		});
            baseStats.Add(91, new byte[] {
			50,
			95,
			180,
			85,
			45,
			70
		});
            baseStats.Add(92, new byte[] {
			30,
			35,
			30,
			100,
			35,
			80
		});
            baseStats.Add(93, new byte[] {
			45,
			50,
			45,
			115,
			55,
			95
		});
            baseStats.Add(94, new byte[] {
			60,
			65,
			60,
			130,
			75,
			110
		});
            baseStats.Add(95, new byte[] {
			35,
			45,
			160,
			30,
			45,
			70
		});
            baseStats.Add(96, new byte[] {
			60,
			48,
			45,
			43,
			90,
			42
		});
            baseStats.Add(97, new byte[] {
			85,
			73,
			70,
			73,
			115,
			67
		});
            baseStats.Add(98, new byte[] {
			30,
			105,
			90,
			25,
			25,
			50
		});
            baseStats.Add(99, new byte[] {
			55,
			130,
			115,
			50,
			50,
			75
		});
            baseStats.Add(100, new byte[] {
			40,
			30,
			50,
			55,
			55,
			100
		});
            baseStats.Add(101, new byte[] {
			60,
			50,
			70,
			80,
			80,
			140
		});
            baseStats.Add(102, new byte[] {
			60,
			40,
			80,
			60,
			45,
			40
		});
            baseStats.Add(103, new byte[] {
			95,
			95,
			85,
			125,
			65,
			55
		});
            baseStats.Add(104, new byte[] {
			50,
			50,
			95,
			40,
			50,
			35
		});
            baseStats.Add(105, new byte[] {
			60,
			80,
			110,
			50,
			80,
			45
		});
            baseStats.Add(106, new byte[] {
			50,
			120,
			53,
			35,
			110,
			87
		});
            baseStats.Add(107, new byte[] {
			50,
			105,
			79,
			35,
			110,
			76
		});
            baseStats.Add(108, new byte[] {
			90,
			55,
			75,
			60,
			75,
			30
		});
            baseStats.Add(109, new byte[] {
			40,
			65,
			95,
			60,
			45,
			35
		});
            baseStats.Add(110, new byte[] {
			65,
			90,
			120,
			85,
			70,
			60
		});
            baseStats.Add(111, new byte[] {
			80,
			85,
			95,
			30,
			30,
			25
		});
            baseStats.Add(112, new byte[] {
			105,
			130,
			120,
			45,
			45,
			40
		});
            baseStats.Add(113, new byte[] {
			250,
			5,
			5,
			35,
			105,
			50
		});
            baseStats.Add(114, new byte[] {
			65,
			55,
			115,
			100,
			40,
			60
		});
            baseStats.Add(115, new byte[] {
			105,
			95,
			80,
			40,
			80,
			90
		});
            baseStats.Add(116, new byte[] {
			30,
			40,
			70,
			70,
			25,
			60
		});
            baseStats.Add(117, new byte[] {
			55,
			65,
			95,
			95,
			45,
			85
		});
            baseStats.Add(118, new byte[] {
			45,
			67,
			60,
			35,
			50,
			63
		});
            baseStats.Add(119, new byte[] {
			80,
			92,
			65,
			65,
			80,
			68
		});
            baseStats.Add(120, new byte[] {
			30,
			45,
			55,
			70,
			55,
			85
		});
            baseStats.Add(121, new byte[] {
			60,
			75,
			85,
			100,
			85,
			115
		});
            baseStats.Add(122, new byte[] {
			40,
			45,
			65,
			100,
			120,
			90
		});
            baseStats.Add(123, new byte[] {
			70,
			110,
			80,
			55,
			80,
			105
		});
            baseStats.Add(124, new byte[] {
			65,
			50,
			35,
			115,
			95,
			95
		});
            baseStats.Add(125, new byte[] {
			65,
			83,
			57,
			95,
			85,
			105
		});
            baseStats.Add(126, new byte[] {
			65,
			95,
			57,
			100,
			85,
			93
		});
            baseStats.Add(127, new byte[] {
			65,
			125,
			100,
			55,
			70,
			85
		});
            baseStats.Add(128, new byte[] {
			75,
			100,
			95,
			40,
			70,
			110
		});
            baseStats.Add(129, new byte[] {
			20,
			10,
			55,
			15,
			20,
			80
		});
            baseStats.Add(130, new byte[] {
			95,
			125,
			79,
			60,
			100,
			81
		});
            baseStats.Add(131, new byte[] {
			130,
			85,
			80,
			85,
			95,
			60
		});
            baseStats.Add(132, new byte[] {
			48,
			48,
			48,
			48,
			48,
			48
		});
            baseStats.Add(133, new byte[] {
			55,
			55,
			50,
			45,
			65,
			55
		});
            baseStats.Add(134, new byte[] {
			130,
			65,
			60,
			110,
			95,
			65
		});
            baseStats.Add(135, new byte[] {
			65,
			65,
			60,
			110,
			95,
			130
		});
            baseStats.Add(136, new byte[] {
			65,
			130,
			60,
			95,
			110,
			65
		});
            baseStats.Add(137, new byte[] {
			65,
			60,
			70,
			85,
			75,
			40
		});
            baseStats.Add(138, new byte[] {
			35,
			40,
			100,
			90,
			55,
			35
		});
            baseStats.Add(139, new byte[] {
			70,
			60,
			125,
			115,
			70,
			55
		});
            baseStats.Add(140, new byte[] {
			30,
			80,
			90,
			55,
			45,
			55
		});
            baseStats.Add(141, new byte[] {
			60,
			115,
			105,
			65,
			70,
			80
		});
            baseStats.Add(142, new byte[] {
			80,
			105,
			65,
			60,
			75,
			130
		});
            baseStats.Add(143, new byte[] {
			160,
			110,
			65,
			65,
			110,
			30
		});
            baseStats.Add(144, new byte[] {
			90,
			85,
			100,
			95,
			125,
			85
		});
            baseStats.Add(145, new byte[] {
			90,
			90,
			85,
			125,
			90,
			100
		});
            baseStats.Add(146, new byte[] {
			90,
			100,
			90,
			125,
			85,
			90
		});
            baseStats.Add(147, new byte[] {
			41,
			64,
			45,
			50,
			50,
			50
		});
            baseStats.Add(148, new byte[] {
			61,
			84,
			65,
			70,
			70,
			70
		});
            baseStats.Add(149, new byte[] {
			91,
			134,
			95,
			100,
			100,
			80
		});
            baseStats.Add(150, new byte[] {
			106,
			110,
			90,
			154,
			90,
			130
		});
            baseStats.Add(151, new byte[] {
			100,
			100,
			100,
			100,
			100,
			100
		});
            baseStats.Add(152, new byte[] {
			45,
			49,
			65,
			49,
			65,
			45
		});
            baseStats.Add(153, new byte[] {
			60,
			62,
			80,
			63,
			80,
			60
		});
            baseStats.Add(154, new byte[] {
			80,
			82,
			100,
			83,
			100,
			80
		});
            baseStats.Add(155, new byte[] {
			39,
			52,
			43,
			60,
			50,
			65
		});
            baseStats.Add(156, new byte[] {
			58,
			64,
			58,
			80,
			65,
			80
		});
            baseStats.Add(157, new byte[] {
			78,
			84,
			78,
			109,
			85,
			100
		});
            baseStats.Add(158, new byte[] {
			50,
			65,
			64,
			44,
			48,
			43
		});
            baseStats.Add(159, new byte[] {
			65,
			80,
			80,
			59,
			63,
			58
		});
            baseStats.Add(160, new byte[] {
			85,
			105,
			100,
			79,
			83,
			78
		});
            baseStats.Add(161, new byte[] {
			35,
			46,
			34,
			35,
			45,
			20
		});
            baseStats.Add(162, new byte[] {
			85,
			76,
			64,
			45,
			55,
			90
		});
            baseStats.Add(163, new byte[] {
			60,
			30,
			30,
			36,
			56,
			50
		});
            baseStats.Add(164, new byte[] {
			100,
			50,
			50,
			76,
			96,
			70
		});
            baseStats.Add(165, new byte[] {
			40,
			20,
			30,
			40,
			80,
			55
		});
            baseStats.Add(166, new byte[] {
			55,
			35,
			50,
			55,
			110,
			85
		});
            baseStats.Add(167, new byte[] {
			40,
			60,
			40,
			40,
			40,
			30
		});
            baseStats.Add(168, new byte[] {
			70,
			90,
			70,
			60,
			60,
			40
		});
            baseStats.Add(169, new byte[] {
			85,
			90,
			80,
			70,
			80,
			130
		});
            baseStats.Add(170, new byte[] {
			75,
			38,
			38,
			56,
			56,
			67
		});
            baseStats.Add(171, new byte[] {
			125,
			58,
			58,
			76,
			76,
			67
		});
            baseStats.Add(172, new byte[] {
			20,
			40,
			15,
			35,
			35,
			60
		});
            baseStats.Add(173, new byte[] {
			50,
			25,
			28,
			45,
			55,
			15
		});
            baseStats.Add(174, new byte[] {
			90,
			30,
			15,
			40,
			20,
			15
		});
            baseStats.Add(175, new byte[] {
			35,
			20,
			65,
			40,
			65,
			20
		});
            baseStats.Add(176, new byte[] {
			55,
			40,
			85,
			80,
			105,
			40
		});
            baseStats.Add(177, new byte[] {
			40,
			50,
			45,
			70,
			45,
			70
		});
            baseStats.Add(178, new byte[] {
			65,
			75,
			70,
			95,
			70,
			95
		});
            baseStats.Add(179, new byte[] {
			55,
			40,
			40,
			65,
			45,
			35
		});
            baseStats.Add(180, new byte[] {
			70,
			55,
			55,
			80,
			60,
			45
		});
            baseStats.Add(181, new byte[] {
			90,
			75,
			75,
			115,
			90,
			55
		});
            baseStats.Add(182, new byte[] {
			75,
			80,
			85,
			90,
			100,
			50
		});
            baseStats.Add(183, new byte[] {
			70,
			20,
			50,
			20,
			50,
			40
		});
            baseStats.Add(184, new byte[] {
			100,
			50,
			80,
			50,
			80,
			50
		});
            baseStats.Add(185, new byte[] {
			70,
			100,
			115,
			30,
			65,
			30
		});
            baseStats.Add(186, new byte[] {
			90,
			75,
			75,
			90,
			100,
			70
		});
            baseStats.Add(187, new byte[] {
			35,
			35,
			40,
			35,
			55,
			50
		});
            baseStats.Add(188, new byte[] {
			55,
			45,
			50,
			45,
			65,
			80
		});
            baseStats.Add(189, new byte[] {
			75,
			55,
			70,
			55,
			85,
			110
		});
            baseStats.Add(190, new byte[] {
			55,
			70,
			55,
			40,
			55,
			85
		});
            baseStats.Add(191, new byte[] {
			30,
			30,
			30,
			30,
			30,
			30
		});
            baseStats.Add(192, new byte[] {
			75,
			75,
			55,
			105,
			85,
			30
		});
            baseStats.Add(193, new byte[] {
			65,
			65,
			45,
			75,
			45,
			95
		});
            baseStats.Add(194, new byte[] {
			55,
			45,
			45,
			25,
			25,
			15
		});
            baseStats.Add(195, new byte[] {
			95,
			85,
			85,
			65,
			65,
			35
		});
            baseStats.Add(196, new byte[] {
			65,
			65,
			60,
			130,
			95,
			110
		});
            baseStats.Add(197, new byte[] {
			95,
			65,
			110,
			60,
			130,
			65
		});
            baseStats.Add(198, new byte[] {
			60,
			85,
			42,
			85,
			42,
			91
		});
            baseStats.Add(199, new byte[] {
			95,
			75,
			80,
			100,
			110,
			30
		});
            baseStats.Add(200, new byte[] {
			60,
			60,
			60,
			85,
			85,
			85
		});
            baseStats.Add(201, new byte[] {
			48,
			72,
			48,
			72,
			48,
			48
		});
            baseStats.Add(202, new byte[] {
			190,
			33,
			58,
			33,
			58,
			33
		});
            baseStats.Add(203, new byte[] {
			70,
			80,
			65,
			90,
			65,
			85
		});
            baseStats.Add(204, new byte[] {
			50,
			65,
			90,
			35,
			35,
			15
		});
            baseStats.Add(205, new byte[] {
			75,
			90,
			140,
			60,
			60,
			40
		});
            baseStats.Add(206, new byte[] {
			100,
			70,
			70,
			65,
			65,
			45
		});
            baseStats.Add(207, new byte[] {
			65,
			75,
			105,
			35,
			65,
			85
		});
            baseStats.Add(208, new byte[] {
			75,
			85,
			200,
			55,
			65,
			30
		});
            baseStats.Add(209, new byte[] {
			60,
			80,
			50,
			40,
			40,
			30
		});
            baseStats.Add(210, new byte[] {
			90,
			120,
			75,
			60,
			60,
			45
		});
            baseStats.Add(211, new byte[] {
			65,
			95,
			75,
			55,
			55,
			85
		});
            baseStats.Add(212, new byte[] {
			70,
			130,
			100,
			55,
			80,
			65
		});
            baseStats.Add(213, new byte[] {
			20,
			10,
			230,
			10,
			230,
			5
		});
            baseStats.Add(214, new byte[] {
			80,
			125,
			75,
			40,
			95,
			85
		});
            baseStats.Add(215, new byte[] {
			55,
			95,
			55,
			35,
			75,
			115
		});
            baseStats.Add(216, new byte[] {
			60,
			80,
			50,
			50,
			50,
			40
		});
            baseStats.Add(217, new byte[] {
			90,
			130,
			75,
			75,
			75,
			55
		});
            baseStats.Add(218, new byte[] {
			40,
			40,
			40,
			70,
			40,
			20
		});
            baseStats.Add(219, new byte[] {
			50,
			50,
			120,
			80,
			80,
			30
		});
            baseStats.Add(220, new byte[] {
			50,
			50,
			40,
			30,
			30,
			50
		});
            baseStats.Add(221, new byte[] {
			100,
			100,
			80,
			60,
			60,
			50
		});
            baseStats.Add(222, new byte[] {
			55,
			55,
			85,
			65,
			85,
			35
		});
            baseStats.Add(223, new byte[] {
			35,
			65,
			35,
			65,
			35,
			65
		});
            baseStats.Add(224, new byte[] {
			75,
			105,
			75,
			105,
			75,
			45
		});
            baseStats.Add(225, new byte[] {
			45,
			55,
			45,
			65,
			45,
			75
		});
            baseStats.Add(226, new byte[] {
			65,
			40,
			70,
			80,
			140,
			70
		});
            baseStats.Add(227, new byte[] {
			65,
			80,
			140,
			40,
			70,
			70
		});
            baseStats.Add(228, new byte[] {
			45,
			60,
			30,
			80,
			50,
			65
		});
            baseStats.Add(229, new byte[] {
			75,
			90,
			50,
			110,
			80,
			95
		});
            baseStats.Add(230, new byte[] {
			75,
			95,
			95,
			95,
			95,
			85
		});
            baseStats.Add(231, new byte[] {
			90,
			60,
			60,
			40,
			40,
			40
		});
            baseStats.Add(232, new byte[] {
			90,
			120,
			120,
			60,
			60,
			50
		});
            baseStats.Add(233, new byte[] {
			85,
			80,
			90,
			105,
			95,
			60
		});
            baseStats.Add(234, new byte[] {
			73,
			95,
			62,
			85,
			65,
			85
		});
            baseStats.Add(235, new byte[] {
			55,
			20,
			35,
			20,
			45,
			75
		});
            baseStats.Add(236, new byte[] {
			35,
			35,
			35,
			35,
			35,
			35
		});
            baseStats.Add(237, new byte[] {
			50,
			95,
			95,
			35,
			110,
			70
		});
            baseStats.Add(238, new byte[] {
			45,
			30,
			15,
			85,
			65,
			65
		});
            baseStats.Add(239, new byte[] {
			45,
			63,
			37,
			65,
			55,
			95
		});
            baseStats.Add(240, new byte[] {
			45,
			75,
			37,
			70,
			55,
			83
		});
            baseStats.Add(241, new byte[] {
			95,
			80,
			105,
			40,
			70,
			100
		});
            baseStats.Add(242, new byte[] {
			255,
			10,
			10,
			75,
			135,
			55
		});
            baseStats.Add(243, new byte[] {
			90,
			85,
			75,
			115,
			100,
			115
		});
            baseStats.Add(244, new byte[] {
			115,
			115,
			85,
			90,
			75,
			100
		});
            baseStats.Add(245, new byte[] {
			100,
			75,
			115,
			90,
			115,
			85
		});
            baseStats.Add(246, new byte[] {
			50,
			64,
			50,
			45,
			50,
			41
		});
            baseStats.Add(247, new byte[] {
			70,
			84,
			70,
			65,
			70,
			51
		});
            baseStats.Add(248, new byte[] {
			100,
			134,
			110,
			95,
			100,
			61
		});
            baseStats.Add(249, new byte[] {
			106,
			90,
			130,
			90,
			154,
			110
		});
            baseStats.Add(250, new byte[] {
			106,
			130,
			90,
			110,
			154,
			90
		});
            baseStats.Add(251, new byte[] {
			100,
			100,
			100,
			100,
			100,
			100
		});
            baseStats.Add(252, new byte[] {
			40,
			45,
			35,
			65,
			55,
			70
		});
            baseStats.Add(253, new byte[] {
			50,
			65,
			45,
			85,
			65,
			95
		});
            baseStats.Add(254, new byte[] {
			70,
			85,
			65,
			105,
			85,
			120
		});
            baseStats.Add(255, new byte[] {
			45,
			60,
			40,
			70,
			50,
			45
		});
            baseStats.Add(256, new byte[] {
			60,
			85,
			60,
			85,
			60,
			55
		});
            baseStats.Add(257, new byte[] {
			80,
			120,
			70,
			110,
			70,
			80
		});
            baseStats.Add(258, new byte[] {
			50,
			70,
			50,
			50,
			50,
			40
		});
            baseStats.Add(259, new byte[] {
			70,
			85,
			70,
			60,
			70,
			50
		});
            baseStats.Add(260, new byte[] {
			100,
			110,
			90,
			85,
			90,
			60
		});
            baseStats.Add(261, new byte[] {
			35,
			55,
			35,
			30,
			30,
			35
		});
            baseStats.Add(262, new byte[] {
			70,
			90,
			70,
			60,
			60,
			70
		});
            baseStats.Add(263, new byte[] {
			38,
			30,
			41,
			30,
			41,
			60
		});
            baseStats.Add(264, new byte[] {
			78,
			70,
			61,
			50,
			61,
			100
		});
            baseStats.Add(265, new byte[] {
			45,
			45,
			35,
			20,
			30,
			20
		});
            baseStats.Add(266, new byte[] {
			50,
			35,
			55,
			25,
			25,
			15
		});
            baseStats.Add(267, new byte[] {
			60,
			70,
			50,
			90,
			50,
			65
		});
            baseStats.Add(268, new byte[] {
			50,
			35,
			55,
			25,
			25,
			15
		});
            baseStats.Add(269, new byte[] {
			60,
			50,
			70,
			50,
			90,
			65
		});
            baseStats.Add(270, new byte[] {
			40,
			30,
			30,
			40,
			50,
			30
		});
            baseStats.Add(271, new byte[] {
			60,
			50,
			50,
			60,
			70,
			50
		});
            baseStats.Add(272, new byte[] {
			80,
			70,
			70,
			90,
			100,
			70
		});
            baseStats.Add(273, new byte[] {
			40,
			40,
			50,
			30,
			30,
			30
		});
            baseStats.Add(274, new byte[] {
			70,
			70,
			40,
			60,
			40,
			60
		});
            baseStats.Add(275, new byte[] {
			90,
			100,
			60,
			90,
			60,
			80
		});
            baseStats.Add(276, new byte[] {
			40,
			55,
			30,
			30,
			30,
			85
		});
            baseStats.Add(277, new byte[] {
			60,
			85,
			60,
			50,
			50,
			125
		});
            baseStats.Add(278, new byte[] {
			40,
			30,
			30,
			55,
			30,
			85
		});
            baseStats.Add(279, new byte[] {
			60,
			50,
			100,
			85,
			70,
			65
		});
            baseStats.Add(280, new byte[] {
			28,
			25,
			25,
			45,
			35,
			40
		});
            baseStats.Add(281, new byte[] {
			38,
			35,
			35,
			65,
			55,
			50
		});
            baseStats.Add(282, new byte[] {
			68,
			65,
			65,
			125,
			115,
			80
		});
            baseStats.Add(283, new byte[] {
			40,
			30,
			32,
			50,
			52,
			65
		});
            baseStats.Add(284, new byte[] {
			70,
			60,
			62,
			80,
			82,
			60
		});
            baseStats.Add(285, new byte[] {
			60,
			40,
			60,
			40,
			60,
			35
		});
            baseStats.Add(286, new byte[] {
			60,
			130,
			80,
			60,
			60,
			70
		});
            baseStats.Add(287, new byte[] {
			60,
			60,
			60,
			35,
			35,
			30
		});
            baseStats.Add(288, new byte[] {
			80,
			80,
			80,
			55,
			55,
			90
		});
            baseStats.Add(289, new byte[] {
			150,
			160,
			100,
			95,
			65,
			100
		});
            baseStats.Add(290, new byte[] {
			31,
			45,
			90,
			30,
			30,
			40
		});
            baseStats.Add(291, new byte[] {
			61,
			90,
			45,
			50,
			50,
			160
		});
            baseStats.Add(292, new byte[] {
			1,
			90,
			45,
			30,
			30,
			40
		});
            baseStats.Add(293, new byte[] {
			64,
			51,
			23,
			51,
			23,
			28
		});
            baseStats.Add(294, new byte[] {
			84,
			71,
			43,
			71,
			43,
			48
		});
            baseStats.Add(295, new byte[] {
			104,
			91,
			63,
			91,
			63,
			68
		});
            baseStats.Add(296, new byte[] {
			72,
			60,
			30,
			20,
			30,
			25
		});
            baseStats.Add(297, new byte[] {
			144,
			120,
			60,
			40,
			60,
			50
		});
            baseStats.Add(298, new byte[] {
			50,
			20,
			40,
			20,
			40,
			20
		});
            baseStats.Add(299, new byte[] {
			30,
			45,
			135,
			45,
			90,
			30
		});
            baseStats.Add(300, new byte[] {
			50,
			45,
			45,
			35,
			35,
			50
		});
            baseStats.Add(301, new byte[] {
			70,
			65,
			65,
			55,
			55,
			70
		});
            baseStats.Add(302, new byte[] {
			50,
			75,
			75,
			65,
			65,
			50
		});
            baseStats.Add(303, new byte[] {
			50,
			85,
			85,
			55,
			55,
			50
		});
            baseStats.Add(304, new byte[] {
			50,
			70,
			100,
			40,
			40,
			30
		});
            baseStats.Add(305, new byte[] {
			60,
			90,
			140,
			50,
			50,
			40
		});
            baseStats.Add(306, new byte[] {
			70,
			110,
			180,
			60,
			60,
			50
		});
            baseStats.Add(307, new byte[] {
			30,
			40,
			55,
			40,
			55,
			60
		});
            baseStats.Add(308, new byte[] {
			60,
			60,
			75,
			60,
			75,
			80
		});
            baseStats.Add(309, new byte[] {
			40,
			45,
			40,
			65,
			40,
			65
		});
            baseStats.Add(310, new byte[] {
			70,
			75,
			60,
			105,
			60,
			105
		});
            baseStats.Add(311, new byte[] {
			60,
			50,
			40,
			85,
			75,
			95
		});
            baseStats.Add(312, new byte[] {
			60,
			40,
			50,
			75,
			85,
			95
		});
            baseStats.Add(313, new byte[] {
			65,
			73,
			55,
			47,
			75,
			85
		});
            baseStats.Add(314, new byte[] {
			65,
			47,
			55,
			73,
			75,
			85
		});
            baseStats.Add(315, new byte[] {
			50,
			60,
			45,
			100,
			80,
			65
		});
            baseStats.Add(316, new byte[] {
			70,
			43,
			53,
			43,
			53,
			40
		});
            baseStats.Add(317, new byte[] {
			100,
			73,
			83,
			73,
			83,
			55
		});
            baseStats.Add(318, new byte[] {
			45,
			90,
			20,
			65,
			20,
			65
		});
            baseStats.Add(319, new byte[] {
			70,
			120,
			40,
			95,
			40,
			95
		});
            baseStats.Add(320, new byte[] {
			130,
			70,
			35,
			70,
			35,
			60
		});
            baseStats.Add(321, new byte[] {
			170,
			90,
			45,
			90,
			45,
			60
		});
            baseStats.Add(322, new byte[] {
			60,
			60,
			40,
			65,
			45,
			35
		});
            baseStats.Add(323, new byte[] {
			70,
			100,
			70,
			105,
			75,
			40
		});
            baseStats.Add(324, new byte[] {
			70,
			85,
			140,
			85,
			70,
			20
		});
            baseStats.Add(325, new byte[] {
			60,
			25,
			35,
			70,
			80,
			60
		});
            baseStats.Add(326, new byte[] {
			80,
			45,
			65,
			90,
			110,
			80
		});
            baseStats.Add(327, new byte[] {
			60,
			60,
			60,
			60,
			60,
			60
		});
            baseStats.Add(328, new byte[] {
			45,
			100,
			45,
			45,
			45,
			10
		});
            baseStats.Add(329, new byte[] {
			50,
			70,
			50,
			50,
			50,
			70
		});
            baseStats.Add(330, new byte[] {
			80,
			100,
			80,
			80,
			80,
			100
		});
            baseStats.Add(331, new byte[] {
			50,
			85,
			40,
			85,
			40,
			35
		});
            baseStats.Add(332, new byte[] {
			70,
			115,
			60,
			115,
			60,
			55
		});
            baseStats.Add(333, new byte[] {
			45,
			40,
			60,
			40,
			75,
			50
		});
            baseStats.Add(334, new byte[] {
			75,
			70,
			90,
			70,
			105,
			80
		});
            baseStats.Add(335, new byte[] {
			73,
			115,
			60,
			60,
			60,
			90
		});
            baseStats.Add(336, new byte[] {
			73,
			100,
			60,
			100,
			60,
			65
		});
            baseStats.Add(337, new byte[] {
			70,
			55,
			65,
			95,
			85,
			70
		});
            baseStats.Add(338, new byte[] {
			70,
			95,
			85,
			55,
			65,
			70
		});
            baseStats.Add(339, new byte[] {
			50,
			48,
			43,
			46,
			41,
			60
		});
            baseStats.Add(340, new byte[] {
			110,
			78,
			73,
			76,
			71,
			60
		});
            baseStats.Add(341, new byte[] {
			43,
			80,
			65,
			50,
			35,
			35
		});
            baseStats.Add(342, new byte[] {
			63,
			120,
			85,
			90,
			55,
			55
		});
            baseStats.Add(343, new byte[] {
			40,
			40,
			55,
			40,
			70,
			55
		});
            baseStats.Add(344, new byte[] {
			60,
			70,
			105,
			70,
			120,
			75
		});
            baseStats.Add(345, new byte[] {
			66,
			41,
			77,
			61,
			87,
			23
		});
            baseStats.Add(346, new byte[] {
			86,
			81,
			97,
			81,
			107,
			43
		});
            baseStats.Add(347, new byte[] {
			45,
			95,
			50,
			40,
			50,
			75
		});
            baseStats.Add(348, new byte[] {
			75,
			125,
			100,
			70,
			80,
			45
		});
            baseStats.Add(349, new byte[] {
			20,
			15,
			20,
			10,
			55,
			80
		});
            baseStats.Add(350, new byte[] {
			95,
			60,
			79,
			100,
			125,
			81
		});
            baseStats.Add(351, new byte[] {
			70,
			70,
			70,
			70,
			70,
			70
		});
            baseStats.Add(352, new byte[] {
			60,
			90,
			70,
			60,
			120,
			40
		});
            baseStats.Add(353, new byte[] {
			44,
			75,
			35,
			63,
			33,
			45
		});
            baseStats.Add(354, new byte[] {
			64,
			115,
			65,
			83,
			63,
			65
		});
            baseStats.Add(355, new byte[] {
			20,
			40,
			90,
			30,
			90,
			25
		});
            baseStats.Add(356, new byte[] {
			40,
			70,
			130,
			60,
			130,
			25
		});
            baseStats.Add(357, new byte[] {
			99,
			68,
			83,
			72,
			87,
			51
		});
            baseStats.Add(358, new byte[] {
			65,
			50,
			70,
			95,
			80,
			65
		});
            baseStats.Add(359, new byte[] {
			65,
			130,
			60,
			75,
			60,
			75
		});
            baseStats.Add(360, new byte[] {
			95,
			23,
			48,
			23,
			48,
			23
		});
            baseStats.Add(361, new byte[] {
			50,
			50,
			50,
			50,
			50,
			50
		});
            baseStats.Add(362, new byte[] {
			80,
			80,
			80,
			80,
			80,
			80
		});
            baseStats.Add(363, new byte[] {
			70,
			40,
			50,
			55,
			50,
			25
		});
            baseStats.Add(364, new byte[] {
			90,
			60,
			70,
			75,
			70,
			45
		});
            baseStats.Add(365, new byte[] {
			110,
			80,
			90,
			95,
			90,
			65
		});
            baseStats.Add(366, new byte[] {
			35,
			64,
			85,
			74,
			55,
			32
		});
            baseStats.Add(367, new byte[] {
			55,
			104,
			105,
			94,
			75,
			52
		});
            baseStats.Add(368, new byte[] {
			55,
			84,
			105,
			114,
			75,
			52
		});
            baseStats.Add(369, new byte[] {
			100,
			90,
			130,
			45,
			65,
			55
		});
            baseStats.Add(370, new byte[] {
			43,
			30,
			55,
			40,
			65,
			97
		});
            baseStats.Add(371, new byte[] {
			45,
			75,
			60,
			40,
			30,
			50
		});
            baseStats.Add(372, new byte[] {
			65,
			95,
			100,
			60,
			50,
			50
		});
            baseStats.Add(373, new byte[] {
			95,
			135,
			80,
			110,
			80,
			100
		});
            baseStats.Add(374, new byte[] {
			40,
			55,
			80,
			35,
			60,
			30
		});
            baseStats.Add(375, new byte[] {
			60,
			75,
			100,
			55,
			80,
			50
		});
            baseStats.Add(376, new byte[] {
			80,
			135,
			130,
			95,
			90,
			70
		});
            baseStats.Add(377, new byte[] {
			80,
			100,
			200,
			50,
			100,
			50
		});
            baseStats.Add(378, new byte[] {
			80,
			50,
			100,
			100,
			200,
			50
		});
            baseStats.Add(379, new byte[] {
			80,
			75,
			150,
			75,
			150,
			50
		});
            baseStats.Add(380, new byte[] {
			80,
			80,
			90,
			110,
			130,
			110
		});
            baseStats.Add(381, new byte[] {
			80,
			90,
			80,
			130,
			110,
			110
		});
            baseStats.Add(382, new byte[] {
			100,
			100,
			90,
			150,
			140,
			90
		});
            baseStats.Add(383, new byte[] {
			100,
			150,
			140,
			100,
			90,
			90
		});
            baseStats.Add(384, new byte[] {
			105,
			150,
			90,
			150,
			90,
			95
		});
            baseStats.Add(385, new byte[] {
			100,
			100,
			100,
			100,
			100,
			100
		});
            baseStats.Add(386, new byte[] {
			50,
			150,
			50,
			150,
			50,
			150
		});
            baseStats.Add(387, new byte[] {
			55,
			68,
			64,
			45,
			55,
			31
		});
            baseStats.Add(388, new byte[] {
			75,
			89,
			85,
			55,
			65,
			36
		});
            baseStats.Add(389, new byte[] {
			95,
			109,
			105,
			75,
			85,
			56
		});
            baseStats.Add(390, new byte[] {
			44,
			58,
			44,
			58,
			44,
			61
		});
            baseStats.Add(391, new byte[] {
			64,
			78,
			52,
			78,
			52,
			81
		});
            baseStats.Add(392, new byte[] {
			76,
			104,
			71,
			104,
			71,
			108
		});
            baseStats.Add(393, new byte[] {
			53,
			51,
			53,
			61,
			56,
			40
		});
            baseStats.Add(394, new byte[] {
			64,
			66,
			68,
			81,
			76,
			50
		});
            baseStats.Add(395, new byte[] {
			84,
			86,
			88,
			111,
			101,
			60
		});
            baseStats.Add(396, new byte[] {
			40,
			55,
			30,
			30,
			30,
			60
		});
            baseStats.Add(397, new byte[] {
			55,
			75,
			50,
			40,
			40,
			80
		});
            baseStats.Add(398, new byte[] {
			85,
			120,
			70,
			50,
			50,
			100
		});
            baseStats.Add(399, new byte[] {
			59,
			45,
			40,
			35,
			40,
			31
		});
            baseStats.Add(400, new byte[] {
			79,
			85,
			60,
			55,
			60,
			71
		});
            baseStats.Add(401, new byte[] {
			37,
			25,
			41,
			25,
			41,
			25
		});
            baseStats.Add(402, new byte[] {
			77,
			85,
			51,
			55,
			51,
			65
		});
            baseStats.Add(403, new byte[] {
			45,
			65,
			34,
			40,
			34,
			45
		});
            baseStats.Add(404, new byte[] {
			60,
			85,
			49,
			60,
			49,
			60
		});
            baseStats.Add(405, new byte[] {
			80,
			120,
			79,
			95,
			79,
			70
		});
            baseStats.Add(406, new byte[] {
			40,
			30,
			35,
			50,
			70,
			55
		});
            baseStats.Add(407, new byte[] {
			60,
			70,
			55,
			125,
			105,
			90
		});
            baseStats.Add(408, new byte[] {
			67,
			125,
			40,
			30,
			30,
			58
		});
            baseStats.Add(409, new byte[] {
			97,
			165,
			60,
			65,
			50,
			58
		});
            baseStats.Add(410, new byte[] {
			30,
			42,
			118,
			42,
			88,
			30
		});
            baseStats.Add(411, new byte[] {
			60,
			52,
			168,
			47,
			138,
			30
		});
            baseStats.Add(412, new byte[] {
			40,
			29,
			45,
			29,
			45,
			36
		});
            baseStats.Add(413, new byte[] {
			60,
			59,
			85,
			79,
			105,
			36
		});
            baseStats.Add(414, new byte[] {
			70,
			94,
			50,
			94,
			50,
			66
		});
            baseStats.Add(415, new byte[] {
			30,
			30,
			42,
			30,
			42,
			70
		});
            baseStats.Add(416, new byte[] {
			70,
			80,
			102,
			80,
			102,
			40
		});
            baseStats.Add(417, new byte[] {
			60,
			45,
			70,
			45,
			90,
			95
		});
            baseStats.Add(418, new byte[] {
			55,
			65,
			35,
			60,
			30,
			85
		});
            baseStats.Add(419, new byte[] {
			85,
			105,
			55,
			85,
			50,
			115
		});
            baseStats.Add(420, new byte[] {
			45,
			35,
			45,
			62,
			53,
			35
		});
            baseStats.Add(421, new byte[] {
			70,
			60,
			70,
			87,
			78,
			85
		});
            baseStats.Add(422, new byte[] {
			76,
			48,
			48,
			57,
			62,
			34
		});
            baseStats.Add(423, new byte[] {
			111,
			83,
			68,
			92,
			82,
			39
		});
            baseStats.Add(424, new byte[] {
			75,
			100,
			66,
			60,
			66,
			115
		});
            baseStats.Add(425, new byte[] {
			90,
			50,
			34,
			60,
			44,
			70
		});
            baseStats.Add(426, new byte[] {
			150,
			80,
			44,
			90,
			54,
			80
		});
            baseStats.Add(427, new byte[] {
			55,
			66,
			44,
			44,
			56,
			85
		});
            baseStats.Add(428, new byte[] {
			65,
			76,
			84,
			54,
			96,
			105
		});
            baseStats.Add(429, new byte[] {
			60,
			60,
			60,
			105,
			105,
			105
		});
            baseStats.Add(430, new byte[] {
			100,
			125,
			52,
			105,
			52,
			71
		});
            baseStats.Add(431, new byte[] {
			49,
			55,
			42,
			42,
			37,
			85
		});
            baseStats.Add(432, new byte[] {
			71,
			82,
			64,
			64,
			59,
			112
		});
            baseStats.Add(433, new byte[] {
			45,
			30,
			50,
			65,
			50,
			45
		});
            baseStats.Add(434, new byte[] {
			63,
			63,
			47,
			41,
			41,
			74
		});
            baseStats.Add(435, new byte[] {
			103,
			93,
			67,
			71,
			61,
			84
		});
            baseStats.Add(436, new byte[] {
			57,
			24,
			86,
			24,
			86,
			23
		});
            baseStats.Add(437, new byte[] {
			67,
			89,
			116,
			79,
			116,
			33
		});
            baseStats.Add(438, new byte[] {
			50,
			80,
			95,
			10,
			45,
			10
		});
            baseStats.Add(439, new byte[] {
			20,
			25,
			45,
			70,
			90,
			60
		});
            baseStats.Add(440, new byte[] {
			100,
			5,
			5,
			15,
			65,
			30
		});
            baseStats.Add(441, new byte[] {
			76,
			65,
			45,
			92,
			42,
			91
		});
            baseStats.Add(442, new byte[] {
			50,
			92,
			108,
			92,
			108,
			35
		});
            baseStats.Add(443, new byte[] {
			58,
			70,
			45,
			40,
			45,
			42
		});
            baseStats.Add(444, new byte[] {
			68,
			90,
			65,
			50,
			55,
			82
		});
            baseStats.Add(445, new byte[] {
			108,
			130,
			95,
			80,
			85,
			102
		});
            baseStats.Add(446, new byte[] {
			135,
			85,
			40,
			40,
			85,
			5
		});
            baseStats.Add(447, new byte[] {
			40,
			70,
			40,
			35,
			40,
			60
		});
            baseStats.Add(448, new byte[] {
			70,
			110,
			70,
			115,
			70,
			90
		});
            baseStats.Add(449, new byte[] {
			68,
			72,
			78,
			38,
			42,
			32
		});
            baseStats.Add(450, new byte[] {
			108,
			112,
			118,
			68,
			72,
			47
		});
            baseStats.Add(451, new byte[] {
			40,
			50,
			90,
			30,
			55,
			65
		});
            baseStats.Add(452, new byte[] {
			70,
			90,
			110,
			60,
			75,
			95
		});
            baseStats.Add(453, new byte[] {
			48,
			61,
			40,
			61,
			40,
			50
		});
            baseStats.Add(454, new byte[] {
			83,
			106,
			65,
			86,
			65,
			85
		});
            baseStats.Add(455, new byte[] {
			74,
			100,
			72,
			90,
			72,
			46
		});
            baseStats.Add(456, new byte[] {
			49,
			49,
			56,
			49,
			61,
			66
		});
            baseStats.Add(457, new byte[] {
			69,
			69,
			76,
			69,
			86,
			91
		});
            baseStats.Add(458, new byte[] {
			45,
			20,
			50,
			60,
			120,
			50
		});
            baseStats.Add(459, new byte[] {
			60,
			62,
			50,
			62,
			60,
			40
		});
            baseStats.Add(460, new byte[] {
			90,
			92,
			75,
			92,
			85,
			60
		});
            baseStats.Add(461, new byte[] {
			70,
			120,
			65,
			45,
			85,
			125
		});
            baseStats.Add(462, new byte[] {
			70,
			70,
			115,
			130,
			90,
			60
		});
            baseStats.Add(463, new byte[] {
			110,
			85,
			95,
			80,
			95,
			50
		});
            baseStats.Add(464, new byte[] {
			115,
			140,
			130,
			55,
			55,
			40
		});
            baseStats.Add(465, new byte[] {
			100,
			100,
			125,
			110,
			50,
			50
		});
            baseStats.Add(466, new byte[] {
			75,
			123,
			67,
			95,
			85,
			95
		});
            baseStats.Add(467, new byte[] {
			75,
			95,
			67,
			125,
			95,
			83
		});
            baseStats.Add(468, new byte[] {
			85,
			50,
			95,
			120,
			115,
			80
		});
            baseStats.Add(469, new byte[] {
			86,
			76,
			86,
			116,
			56,
			95
		});
            baseStats.Add(470, new byte[] {
			65,
			110,
			130,
			60,
			65,
			95
		});
            baseStats.Add(471, new byte[] {
			65,
			60,
			110,
			130,
			95,
			65
		});
            baseStats.Add(472, new byte[] {
			75,
			95,
			125,
			45,
			75,
			95
		});
            baseStats.Add(473, new byte[] {
			110,
			130,
			80,
			70,
			60,
			80
		});
            baseStats.Add(474, new byte[] {
			85,
			80,
			70,
			135,
			75,
			90
		});
            baseStats.Add(475, new byte[] {
			68,
			125,
			65,
			65,
			115,
			80
		});
            baseStats.Add(476, new byte[] {
			60,
			55,
			145,
			75,
			150,
			40
		});
            baseStats.Add(477, new byte[] {
			45,
			100,
			135,
			65,
			135,
			45
		});
            baseStats.Add(478, new byte[] {
			70,
			80,
			70,
			80,
			70,
			110
		});
            baseStats.Add(479, new byte[] {
			50,
			50,
			77,
			95,
			77,
			91
		});
            baseStats.Add(480, new byte[] {
			75,
			75,
			130,
			75,
			130,
			95
		});
            baseStats.Add(481, new byte[] {
			80,
			105,
			105,
			105,
			105,
			80
		});
            baseStats.Add(482, new byte[] {
			75,
			125,
			70,
			125,
			70,
			115
		});
            baseStats.Add(483, new byte[] {
			100,
			120,
			120,
			150,
			100,
			90
		});
            baseStats.Add(484, new byte[] {
			90,
			120,
			100,
			150,
			120,
			100
		});
            baseStats.Add(485, new byte[] {
			91,
			90,
			106,
			130,
			106,
			77
		});
            baseStats.Add(486, new byte[] {
			110,
			160,
			110,
			80,
			110,
			100
		});
            baseStats.Add(487, new byte[] {
			150,
			100,
			120,
			100,
			120,
			90
		});
            baseStats.Add(488, new byte[] {
			120,
			70,
			120,
			75,
			130,
			85
		});
            baseStats.Add(489, new byte[] {
			80,
			80,
			80,
			80,
			80,
			80
		});
            baseStats.Add(490, new byte[] {
			100,
			100,
			100,
			100,
			100,
			100
		});
            baseStats.Add(491, new byte[] {
			70,
			90,
			90,
			135,
			90,
			125
		});
            baseStats.Add(492, new byte[] {
			100,
			100,
			100,
			100,
			100,
			100
		});
            baseStats.Add(493, new byte[] {
			120,
			120,
			120,
			120,
			120,
			120
		});
            baseStats.Add(494, new byte[] {
			100,
			100,
			100,
			100,
			100,
			100
		});
            baseStats.Add(495, new byte[] {
			45,
			45,
			55,
			45,
			55,
			63
		});
            baseStats.Add(496, new byte[] {
			60,
			60,
			75,
			60,
			75,
			83
		});
            baseStats.Add(497, new byte[] {
			75,
			75,
			95,
			75,
			95,
			113
		});
            baseStats.Add(498, new byte[] {
			65,
			63,
			45,
			45,
			45,
			45
		});
            baseStats.Add(499, new byte[] {
			90,
			93,
			55,
			70,
			55,
			55
		});
            baseStats.Add(500, new byte[] {
			110,
			123,
			65,
			100,
			65,
			65
		});
            baseStats.Add(501, new byte[] {
			55,
			55,
			45,
			63,
			45,
			45
		});
            baseStats.Add(502, new byte[] {
			75,
			75,
			60,
			83,
			60,
			60
		});
            baseStats.Add(503, new byte[] {
			95,
			100,
			85,
			108,
			70,
			70
		});
            baseStats.Add(504, new byte[] {
			45,
			55,
			39,
			35,
			39,
			42
		});
            baseStats.Add(505, new byte[] {
			60,
			85,
			69,
			60,
			69,
			77
		});
            baseStats.Add(506, new byte[] {
			45,
			60,
			45,
			25,
			45,
			55
		});
            baseStats.Add(507, new byte[] {
			65,
			80,
			65,
			35,
			65,
			60
		});
            baseStats.Add(508, new byte[] {
			85,
			100,
			90,
			45,
			90,
			80
		});
            baseStats.Add(509, new byte[] {
			41,
			50,
			37,
			50,
			37,
			66
		});
            baseStats.Add(510, new byte[] {
			64,
			88,
			50,
			88,
			50,
			106
		});
            baseStats.Add(511, new byte[] {
			50,
			53,
			48,
			53,
			48,
			64
		});
            baseStats.Add(512, new byte[] {
			75,
			98,
			63,
			98,
			63,
			101
		});
            baseStats.Add(513, new byte[] {
			50,
			53,
			48,
			53,
			48,
			64
		});
            baseStats.Add(514, new byte[] {
			75,
			98,
			63,
			98,
			63,
			101
		});
            baseStats.Add(515, new byte[] {
			50,
			53,
			48,
			53,
			48,
			64
		});
            baseStats.Add(516, new byte[] {
			75,
			98,
			63,
			98,
			63,
			101
		});
            baseStats.Add(517, new byte[] {
			76,
			25,
			45,
			67,
			55,
			24
		});
            baseStats.Add(518, new byte[] {
			116,
			55,
			85,
			107,
			95,
			29
		});
            baseStats.Add(519, new byte[] {
			50,
			55,
			50,
			36,
			30,
			43
		});
            baseStats.Add(520, new byte[] {
			62,
			77,
			62,
			50,
			42,
			65
		});
            baseStats.Add(521, new byte[] {
			80,
			105,
			80,
			65,
			55,
			93
		});
            baseStats.Add(522, new byte[] {
			45,
			60,
			32,
			50,
			32,
			76
		});
            baseStats.Add(523, new byte[] {
			75,
			100,
			63,
			80,
			63,
			116
		});
            baseStats.Add(524, new byte[] {
			55,
			75,
			85,
			25,
			25,
			15
		});
            baseStats.Add(525, new byte[] {
			70,
			105,
			105,
			50,
			40,
			20
		});
            baseStats.Add(526, new byte[] {
			85,
			135,
			130,
			60,
			70,
			25
		});
            baseStats.Add(527, new byte[] {
			55,
			45,
			43,
			55,
			43,
			72
		});
            baseStats.Add(528, new byte[] {
			67,
			57,
			55,
			77,
			55,
			114
		});
            baseStats.Add(529, new byte[] {
			60,
			85,
			40,
			30,
			45,
			68
		});
            baseStats.Add(530, new byte[] {
			110,
			135,
			60,
			50,
			65,
			88
		});
            baseStats.Add(531, new byte[] {
			103,
			60,
			86,
			60,
			86,
			50
		});
            baseStats.Add(532, new byte[] {
			75,
			80,
			55,
			25,
			35,
			35
		});
            baseStats.Add(533, new byte[] {
			85,
			105,
			85,
			40,
			50,
			40
		});
            baseStats.Add(534, new byte[] {
			105,
			140,
			95,
			55,
			65,
			45
		});
            baseStats.Add(535, new byte[] {
			50,
			50,
			40,
			50,
			40,
			64
		});
            baseStats.Add(536, new byte[] {
			75,
			65,
			55,
			65,
			55,
			69
		});
            baseStats.Add(537, new byte[] {
			105,
			85,
			75,
			85,
			75,
			74
		});
            baseStats.Add(538, new byte[] {
			120,
			100,
			85,
			30,
			85,
			45
		});
            baseStats.Add(539, new byte[] {
			75,
			125,
			75,
			30,
			75,
			85
		});
            baseStats.Add(540, new byte[] {
			45,
			53,
			70,
			40,
			60,
			42
		});
            baseStats.Add(541, new byte[] {
			55,
			63,
			90,
			50,
			80,
			42
		});
            baseStats.Add(542, new byte[] {
			75,
			103,
			80,
			70,
			70,
			92
		});
            baseStats.Add(543, new byte[] {
			30,
			45,
			59,
			30,
			39,
			57
		});
            baseStats.Add(544, new byte[] {
			40,
			55,
			99,
			40,
			79,
			47
		});
            baseStats.Add(545, new byte[] {
			60,
			90,
			89,
			55,
			69,
			112
		});
            baseStats.Add(546, new byte[] {
			40,
			27,
			60,
			37,
			50,
			66
		});
            baseStats.Add(547, new byte[] {
			60,
			67,
			85,
			77,
			75,
			116
		});
            baseStats.Add(548, new byte[] {
			45,
			35,
			50,
			70,
			50,
			30
		});
            baseStats.Add(549, new byte[] {
			70,
			60,
			75,
			110,
			75,
			90
		});
            baseStats.Add(550, new byte[] {
			70,
			92,
			65,
			80,
			55,
			98
		});
            baseStats.Add(551, new byte[] {
			50,
			72,
			35,
			35,
			35,
			65
		});
            baseStats.Add(552, new byte[] {
			60,
			82,
			45,
			45,
			45,
			74
		});
            baseStats.Add(553, new byte[] {
			95,
			117,
			70,
			65,
			70,
			92
		});
            baseStats.Add(554, new byte[] {
			70,
			90,
			45,
			15,
			45,
			50
		});
            baseStats.Add(555, new byte[] {
			105,
			140,
			55,
			30,
			55,
			95
		});
            baseStats.Add(556, new byte[] {
			75,
			86,
			67,
			106,
			67,
			60
		});
            baseStats.Add(557, new byte[] {
			50,
			65,
			85,
			35,
			35,
			55
		});
            baseStats.Add(558, new byte[] {
			70,
			95,
			125,
			65,
			75,
			45
		});
            baseStats.Add(559, new byte[] {
			50,
			75,
			70,
			35,
			70,
			48
		});
            baseStats.Add(560, new byte[] {
			65,
			90,
			115,
			45,
			115,
			58
		});
            baseStats.Add(561, new byte[] {
			72,
			58,
			80,
			103,
			80,
			97
		});
            baseStats.Add(562, new byte[] {
			38,
			30,
			85,
			55,
			65,
			30
		});
            baseStats.Add(563, new byte[] {
			58,
			50,
			145,
			95,
			105,
			30
		});
            baseStats.Add(564, new byte[] {
			54,
			78,
			103,
			53,
			45,
			22
		});
            baseStats.Add(565, new byte[] {
			74,
			108,
			133,
			83,
			65,
			32
		});
            baseStats.Add(566, new byte[] {
			55,
			112,
			45,
			74,
			45,
			70
		});
            baseStats.Add(567, new byte[] {
			75,
			140,
			65,
			112,
			65,
			110
		});
            baseStats.Add(568, new byte[] {
			50,
			50,
			62,
			40,
			62,
			65
		});
            baseStats.Add(569, new byte[] {
			80,
			95,
			82,
			60,
			82,
			75
		});
            baseStats.Add(570, new byte[] {
			40,
			65,
			40,
			80,
			40,
			65
		});
            baseStats.Add(571, new byte[] {
			60,
			105,
			60,
			120,
			60,
			105
		});
            baseStats.Add(572, new byte[] {
			55,
			50,
			40,
			40,
			40,
			75
		});
            baseStats.Add(573, new byte[] {
			75,
			95,
			60,
			65,
			60,
			115
		});
            baseStats.Add(574, new byte[] {
			45,
			30,
			50,
			55,
			65,
			45
		});
            baseStats.Add(575, new byte[] {
			60,
			45,
			70,
			75,
			85,
			55
		});
            baseStats.Add(576, new byte[] {
			70,
			55,
			95,
			95,
			110,
			65
		});
            baseStats.Add(577, new byte[] {
			45,
			30,
			40,
			105,
			50,
			20
		});
            baseStats.Add(578, new byte[] {
			65,
			40,
			50,
			125,
			60,
			30
		});
            baseStats.Add(579, new byte[] {
			110,
			65,
			75,
			125,
			85,
			30
		});
            baseStats.Add(580, new byte[] {
			62,
			44,
			50,
			44,
			50,
			55
		});
            baseStats.Add(581, new byte[] {
			75,
			87,
			63,
			87,
			63,
			98
		});
            baseStats.Add(582, new byte[] {
			36,
			50,
			50,
			65,
			60,
			44
		});
            baseStats.Add(583, new byte[] {
			51,
			65,
			65,
			80,
			75,
			59
		});
            baseStats.Add(584, new byte[] {
			71,
			95,
			85,
			110,
			95,
			79
		});
            baseStats.Add(585, new byte[] {
			60,
			60,
			50,
			40,
			50,
			75
		});
            baseStats.Add(586, new byte[] {
			80,
			100,
			70,
			60,
			70,
			95
		});
            baseStats.Add(587, new byte[] {
			55,
			75,
			60,
			75,
			60,
			103
		});
            baseStats.Add(588, new byte[] {
			50,
			75,
			45,
			40,
			45,
			60
		});
            baseStats.Add(589, new byte[] {
			70,
			135,
			105,
			60,
			105,
			20
		});
            baseStats.Add(590, new byte[] {
			69,
			55,
			45,
			55,
			55,
			15
		});
            baseStats.Add(591, new byte[] {
			114,
			85,
			70,
			85,
			80,
			30
		});
            baseStats.Add(592, new byte[] {
			55,
			40,
			50,
			65,
			85,
			40
		});
            baseStats.Add(593, new byte[] {
			100,
			60,
			70,
			85,
			105,
			60
		});
            baseStats.Add(594, new byte[] {
			165,
			75,
			80,
			40,
			45,
			65
		});
            baseStats.Add(595, new byte[] {
			50,
			47,
			50,
			57,
			50,
			65
		});
            baseStats.Add(596, new byte[] {
			70,
			77,
			60,
			97,
			60,
			108
		});
            baseStats.Add(597, new byte[] {
			44,
			50,
			91,
			24,
			86,
			10
		});
            baseStats.Add(598, new byte[] {
			74,
			94,
			131,
			54,
			116,
			20
		});
            baseStats.Add(599, new byte[] {
			40,
			55,
			70,
			45,
			60,
			30
		});
            baseStats.Add(600, new byte[] {
			60,
			80,
			95,
			70,
			85,
			50
		});
            baseStats.Add(601, new byte[] {
			60,
			100,
			115,
			70,
			85,
			90
		});
            baseStats.Add(602, new byte[] {
			35,
			55,
			40,
			45,
			40,
			60
		});
            baseStats.Add(603, new byte[] {
			65,
			85,
			70,
			75,
			70,
			40
		});
            baseStats.Add(604, new byte[] {
			85,
			115,
			80,
			105,
			80,
			50
		});
            baseStats.Add(605, new byte[] {
			55,
			55,
			55,
			85,
			55,
			30
		});
            baseStats.Add(606, new byte[] {
			75,
			75,
			75,
			125,
			95,
			40
		});
            baseStats.Add(607, new byte[] {
			50,
			30,
			55,
			65,
			55,
			20
		});
            baseStats.Add(608, new byte[] {
			60,
			40,
			60,
			95,
			60,
			55
		});
            baseStats.Add(609, new byte[] {
			60,
			55,
			90,
			145,
			90,
			80
		});
            baseStats.Add(610, new byte[] {
			46,
			87,
			60,
			30,
			40,
			57
		});
            baseStats.Add(611, new byte[] {
			66,
			117,
			70,
			40,
			50,
			67
		});
            baseStats.Add(612, new byte[] {
			76,
			147,
			90,
			60,
			70,
			97
		});
            baseStats.Add(613, new byte[] {
			55,
			70,
			40,
			60,
			40,
			40
		});
            baseStats.Add(614, new byte[] {
			95,
			110,
			80,
			70,
			80,
			50
		});
            baseStats.Add(615, new byte[] {
			70,
			50,
			30,
			95,
			135,
			105
		});
            baseStats.Add(616, new byte[] {
			50,
			40,
			85,
			40,
			65,
			25
		});
            baseStats.Add(617, new byte[] {
			80,
			70,
			40,
			100,
			60,
			145
		});
            baseStats.Add(618, new byte[] {
			109,
			66,
			84,
			81,
			99,
			32
		});
            baseStats.Add(619, new byte[] {
			45,
			85,
			50,
			55,
			50,
			65
		});
            baseStats.Add(620, new byte[] {
			65,
			125,
			60,
			95,
			60,
			105
		});
            baseStats.Add(621, new byte[] {
			77,
			120,
			90,
			60,
			90,
			48
		});
            baseStats.Add(622, new byte[] {
			59,
			74,
			50,
			35,
			50,
			35
		});
            baseStats.Add(623, new byte[] {
			89,
			124,
			80,
			55,
			80,
			55
		});
            baseStats.Add(624, new byte[] {
			45,
			85,
			70,
			40,
			40,
			60
		});
            baseStats.Add(625, new byte[] {
			65,
			125,
			100,
			60,
			70,
			70
		});
            baseStats.Add(626, new byte[] {
			95,
			110,
			95,
			40,
			95,
			55
		});
            baseStats.Add(627, new byte[] {
			70,
			83,
			50,
			37,
			50,
			60
		});
            baseStats.Add(628, new byte[] {
			100,
			123,
			75,
			57,
			75,
			80
		});
            baseStats.Add(629, new byte[] {
			70,
			55,
			75,
			45,
			65,
			60
		});
            baseStats.Add(630, new byte[] {
			110,
			65,
			105,
			55,
			95,
			80
		});
            baseStats.Add(631, new byte[] {
			85,
			97,
			66,
			105,
			66,
			65
		});
            baseStats.Add(632, new byte[] {
			58,
			109,
			112,
			48,
			48,
			109
		});
            baseStats.Add(633, new byte[] {
			52,
			65,
			50,
			45,
			50,
			38
		});
            baseStats.Add(634, new byte[] {
			72,
			85,
			70,
			65,
			70,
			58
		});
            baseStats.Add(635, new byte[] {
			92,
			105,
			90,
			125,
			90,
			98
		});
            baseStats.Add(636, new byte[] {
			55,
			85,
			55,
			50,
			55,
			60
		});
            baseStats.Add(637, new byte[] {
			85,
			60,
			65,
			135,
			105,
			100
		});
            baseStats.Add(638, new byte[] {
			91,
			90,
			129,
			90,
			72,
			108
		});
            baseStats.Add(639, new byte[] {
			91,
			129,
			90,
			72,
			90,
			108
		});
            baseStats.Add(640, new byte[] {
			91,
			90,
			72,
			90,
			129,
			108
		});
            baseStats.Add(641, new byte[] {
			79,
			115,
			70,
			125,
			80,
			111
		});
            baseStats.Add(642, new byte[] {
			79,
			115,
			70,
			125,
			80,
			111
		});
            baseStats.Add(643, new byte[] {
			100,
			120,
			100,
			150,
			120,
			90
		});
            baseStats.Add(644, new byte[] {
			100,
			150,
			120,
			120,
			100,
			90
		});
            baseStats.Add(645, new byte[] {
			89,
			125,
			90,
			115,
			80,
			101
		});
            baseStats.Add(646, new byte[] {
			125,
			130,
			90,
			130,
			90,
			95
		});
            baseStats.Add(647, new byte[] {
			91,
			72,
			90,
			129,
			90,
			108
		});
            baseStats.Add(648, new byte[] {
			100,
			77,
			77,
			128,
			128,
			90
		});
            baseStats.Add(649, new byte[] {
			71,
			120,
			95,
			120,
			95,
			99
		});
            baseStats.Add(650, new byte[] {
			56,
			61,
			65,
			48,
			45,
			38
		});
            baseStats.Add(651, new byte[] {
			61,
			78,
			95,
			56,
			58,
			57
		});
            baseStats.Add(652, new byte[] {
			88,
			107,
			122,
			74,
			75,
			64
		});
            baseStats.Add(653, new byte[] {
			40,
			45,
			40,
			62,
			60,
			60
		});
            baseStats.Add(654, new byte[] {
			59,
			59,
			58,
			90,
			70,
			73
		});
            baseStats.Add(655, new byte[] {
			75,
			69,
			72,
			114,
			100,
			104
		});
            baseStats.Add(656, new byte[] {
			41,
			56,
			40,
			62,
			44,
			71
		});
            baseStats.Add(657, new byte[] {
			54,
			63,
			52,
			83,
			56,
			97
		});
            baseStats.Add(658, new byte[] {
			72,
			95,
			67,
			103,
			71,
			122
		});
            baseStats.Add(659, new byte[] {
			38,
			36,
			38,
			32,
			36,
			57
		});
            baseStats.Add(660, new byte[] {
			85,
			56,
			77,
			50,
			77,
			78
		});
            baseStats.Add(661, new byte[] {
			45,
			50,
			43,
			40,
			38,
			62
		});
            baseStats.Add(662, new byte[] {
			62,
			73,
			55,
			56,
			52,
			84
		});
            baseStats.Add(663, new byte[] {
			78,
			81,
			71,
			74,
			69,
			126
		});
            baseStats.Add(664, new byte[] {
			38,
			35,
			40,
			27,
			25,
			35
		});
            baseStats.Add(665, new byte[] {
			45,
			22,
			60,
			27,
			30,
			29
		});
            baseStats.Add(666, new byte[] {
			80,
			52,
			50,
			90,
			50,
			89
		});
            baseStats.Add(667, new byte[] {
			62,
			50,
			58,
			73,
			54,
			72
		});
            baseStats.Add(668, new byte[] {
			86,
			68,
			72,
			109,
			66,
			106
		});
            baseStats.Add(669, new byte[] {
			44,
			38,
			39,
			61,
			79,
			42
		});
            baseStats.Add(670, new byte[] {
			54,
			45,
			47,
			75,
			98,
			52
		});
            baseStats.Add(671, new byte[] {
			78,
			65,
			68,
			112,
			154,
			75
		});
            baseStats.Add(672, new byte[] {
			66,
			65,
			48,
			62,
			57,
			52
		});
            baseStats.Add(673, new byte[] {
			123,
			100,
			62,
			97,
			81,
			68
		});
            baseStats.Add(674, new byte[] {
			67,
			82,
			62,
			46,
			48,
			43
		});
            baseStats.Add(675, new byte[] {
			95,
			124,
			78,
			69,
			71,
			58
		});
            baseStats.Add(676, new byte[] {
			75,
			80,
			60,
			65,
			90,
			102
		});
            baseStats.Add(677, new byte[] {
			62,
			48,
			54,
			63,
			60,
			68
		});
            baseStats.Add(678, new byte[] {
			74,
			48,
			76,
			83,
			81,
			104
		});
            baseStats.Add(679, new byte[] {
			45,
			80,
			100,
			35,
			37,
			28
		});
            baseStats.Add(680, new byte[] {
			59,
			110,
			150,
			45,
			49,
			35
		});
            baseStats.Add(681, new byte[] {
			60,
			50,
			150,
			50,
			150,
			60
		});
            baseStats.Add(682, new byte[] {
			78,
			52,
			60,
			63,
			65,
			23
		});
            baseStats.Add(683, new byte[] {
			101,
			72,
			72,
			99,
			89,
			29
		});
            baseStats.Add(684, new byte[] {
			62,
			48,
			66,
			59,
			57,
			49
		});
            baseStats.Add(685, new byte[] {
			82,
			80,
			86,
			85,
			75,
			72
		});
            baseStats.Add(686, new byte[] {
			53,
			54,
			53,
			37,
			46,
			45
		});
            baseStats.Add(687, new byte[] {
			86,
			92,
			88,
			68,
			75,
			73
		});
            baseStats.Add(688, new byte[] {
			42,
			52,
			67,
			39,
			56,
			50
		});
            baseStats.Add(689, new byte[] {
			72,
			92,
			115,
			54,
			86,
			68
		});
            baseStats.Add(690, new byte[] {
			50,
			60,
			60,
			60,
			60,
			30
		});
            baseStats.Add(691, new byte[] {
			65,
			75,
			90,
			97,
			123,
			44
		});
            baseStats.Add(692, new byte[] {
			50,
			53,
			62,
			58,
			63,
			44
		});
            baseStats.Add(693, new byte[] {
			71,
			73,
			88,
			120,
			89,
			59
		});
            baseStats.Add(694, new byte[] {
			44,
			38,
			33,
			61,
			43,
			70
		});
            baseStats.Add(695, new byte[] {
			62,
			55,
			52,
			109,
			94,
			109
		});
            baseStats.Add(696, new byte[] {
			58,
			89,
			77,
			45,
			45,
			48
		});
            baseStats.Add(697, new byte[] {
			82,
			121,
			119,
			69,
			59,
			71
		});
            baseStats.Add(698, new byte[] {
			77,
			59,
			50,
			67,
			63,
			46
		});
            baseStats.Add(699, new byte[] {
			123,
			77,
			72,
			99,
			92,
			58
		});
            baseStats.Add(700, new byte[] {
			95,
			65,
			65,
			110,
			130,
			60
		});
            baseStats.Add(701, new byte[] {
			78,
			92,
			75,
			74,
			63,
			118
		});
            baseStats.Add(702, new byte[] {
			67,
			58,
			57,
			81,
			67,
			101
		});
            baseStats.Add(703, new byte[] {
			50,
			50,
			150,
			50,
			150,
			50
		});
            baseStats.Add(704, new byte[] {
			45,
			50,
			35,
			55,
			75,
			40
		});
            baseStats.Add(705, new byte[] {
			68,
			75,
			53,
			83,
			113,
			60
		});
            baseStats.Add(706, new byte[] {
			90,
			100,
			70,
			110,
			150,
			80
		});
            baseStats.Add(707, new byte[] {
			57,
			80,
			91,
			80,
			87,
			75
		});
            baseStats.Add(708, new byte[] {
			43,
			70,
			48,
			50,
			60,
			38
		});
            baseStats.Add(709, new byte[] {
			85,
			110,
			76,
			65,
			82,
			56
		});
            baseStats.Add(710, new byte[] {
			49,
			66,
			70,
			44,
			55,
			51
		});
            baseStats.Add(711, new byte[] {
			65,
			90,
			122,
			58,
			75,
			84
		});
            baseStats.Add(712, new byte[] {
			55,
			69,
			85,
			32,
			35,
			28
		});
            baseStats.Add(713, new byte[] {
			95,
			117,
			184,
			44,
			46,
			28
		});
            baseStats.Add(714, new byte[] {
			40,
			30,
			35,
			45,
			40,
			55
		});
            baseStats.Add(715, new byte[] {
			85,
			70,
			80,
			97,
			80,
			123
		});
            baseStats.Add(716, new byte[] {
			126,
			131,
			95,
			131,
			98,
			99
		});
            baseStats.Add(717, new byte[] {
			126,
			131,
			95,
			131,
			98,
			99
		});
            baseStats.Add(718, new byte[] {
			108,
			100,
			121,
			81,
			95,
			95
		});
            baseStats.Add(719, new byte[] {
			0,
			0,
			0,
			0,
			0,
			0
		});
            baseStats.Add(720, new byte[] {
			0,
			0,
			0,
			0,
			0,
			0
		});
            baseStats.Add(721, new byte[] {
			0,
			0,
			0,
			0,
			0,
			0
		});


            dictionariesInitialized = true;
        }


        public static uint maxExp(string s)
        {
            ushort pkm = (ushort)species.IndexOf(s);
            uint exp = 0;
            switch (expList[pkm])
            {
                case 0:
                    exp = slowlist[99];
                    break;
                case 1:
                    exp = mediumSlowList[99];
                    break;
                case 2:
                    exp = mediumFastList[99];
                    break;
                case 3:
                    exp = fastlist[99];
                    break;
                case 4:
                    exp = fluctuatinglist[99];
                    break;
                case 5:
                    exp = erraticlist[99];
                    break;
            }
            return exp;
        }

        public static byte calculateLevel(string s, uint exp)
        {
            ushort pkm = (ushort)species.IndexOf(s);
            byte level = 0;
            int y = 0;
            switch (expList[pkm])
            {
                case 0:
                    while (y < 100)
                    {
                        if (exp >= slowlist[level])
                        {
                            level += 1;
                        }
                        else
                        {
                            break;
                        }
                        if (level >= 100)
                        {
                            level = 100;
                        }
                        y += 1;
                    }
                    return level;
                case 1:
                    while (y < 100)
                    {
                        if (exp >= mediumSlowList[level])
                        {
                            level += 1;
                        }
                        else
                        {
                            break;
                        }
                        if (level >= 100)
                        {
                            level = 100;
                        }
                        y += 1;
                    }
                    return level;
                case 2:
                    while (y < 100)
                    {
                        if (exp >= mediumFastList[level])
                        {
                            level += 1;
                        }
                        else
                        {
                            break;
                        }
                        if (level >= 100)
                        {
                            level = 100;
                        }
                        y += 1;
                    }
                    return level;
                case 3:
                    while (y < 100)
                    {
                        if (exp >= fastlist[level])
                        {
                            level += 1;
                        }
                        else
                        {
                            break;
                        }
                        if (level >= 100)
                        {
                            level = 100;
                        }
                        y += 1;
                    }
                    return level;
                case 4:
                    while (y < 100)
                    {
                        if (exp >= fluctuatinglist[level])
                        {
                            level += 1;
                        }
                        else
                        {
                            break;
                        }
                        if (level >= 100)
                        {
                            level = 100;
                        }
                        y += 1;
                    }
                    return level;
                case 5:
                    while (y < 100)
                    {
                        if (exp >= erraticlist[level])
                        {
                            level += 1;
                        }
                        else
                        {
                            break;
                        }
                        if (level >= 100)
                        {
                            level = 100;
                        }
                        y += 1;
                    }
                    return level;
            }
            return 1;
        }

        public static uint calculateExp(string s, byte level)
        {
            ushort pkm = (ushort)species.IndexOf(s);
            uint exp = 0;
            if (level > 100)
            {
                level = 100;
            }
            switch (expList[pkm])
            {
                case 0:
                    exp = slowlist[level - 1];
                    break;
                case 1:
                    exp = mediumSlowList[level - 1];
                    break;
                case 2:
                    exp = mediumFastList[level - 1];
                    break;
                case 3:
                    exp = fastlist[level - 1];
                    break;
                case 4:
                    exp = fluctuatinglist[level - 1];
                    break;
                case 5:
                    exp = erraticlist[level - 1];
                    break;
            }
            return exp;
        }
    }
}
